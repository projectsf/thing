/* jetlunJetlunHanProxy.cpp
   Generated by gSOAP 2.7.9i from JetlunHan.hpp
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "jetlunJetlunHanProxy.h"

namespace jetlun {

JetlunHanProxy::JetlunHanProxy()
{	JetlunHanProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

JetlunHanProxy::JetlunHanProxy(soap_mode iomode)
{	JetlunHanProxy_init(iomode, iomode);
}

JetlunHanProxy::JetlunHanProxy(soap_mode imode, soap_mode omode)
{	JetlunHanProxy_init(imode, omode);
}

void JetlunHanProxy::JetlunHanProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"hs", "urn:JetlunHan", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

JetlunHanProxy::~JetlunHanProxy()
{ }

void JetlunHanProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *JetlunHanProxy::soap_fault()
{	return this->fault;
}

const char *JetlunHanProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *JetlunHanProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int JetlunHanProxy::startGwModule(hs__StartGwModuleRequest request, hs__NoResponse &response)
{	struct soap *soap = this;
	struct hs__startGwModule soap_tmp_hs__startGwModule;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://www.grid-net.com/jetlunhan.cgi";
	soap->encodingStyle = "";
	soap_tmp_hs__startGwModule.request = request;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_hs__startGwModule(soap, &soap_tmp_hs__startGwModule);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_hs__startGwModule(soap, &soap_tmp_hs__startGwModule, "hs:startGwModule", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_hs__startGwModule(soap, &soap_tmp_hs__startGwModule, "hs:startGwModule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&response)
		return soap_closesock(soap);
	response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	response.soap_get(soap, "hs:NoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int JetlunHanProxy::getGwModuleStatus(int &response)
{	struct soap *soap = this;
	struct hs__getGwModuleStatus soap_tmp_hs__getGwModuleStatus;
	struct hs__getGwModuleStatusResponse *soap_tmp_hs__getGwModuleStatusResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://www.grid-net.com/jetlunhan.cgi";
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_hs__getGwModuleStatus(soap, &soap_tmp_hs__getGwModuleStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_hs__getGwModuleStatus(soap, &soap_tmp_hs__getGwModuleStatus, "hs:getGwModuleStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_hs__getGwModuleStatus(soap, &soap_tmp_hs__getGwModuleStatus, "hs:getGwModuleStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__int(soap, &response);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_hs__getGwModuleStatusResponse = soap_get_hs__getGwModuleStatusResponse(soap, NULL, "hs:getGwModuleStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	response = soap_tmp_hs__getGwModuleStatusResponse->response;
	return soap_closesock(soap);
}

} // namespace jetlun

/* End of client proxy code */
