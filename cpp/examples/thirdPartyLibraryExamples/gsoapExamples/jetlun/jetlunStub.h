/* jetlunStub.h
   Generated by gSOAP 2.7.9i from JetlunHan.hpp
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef jetlunStub_H
#define jetlunStub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace jetlun {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_jetlun_hs__NoResponse
#define SOAP_TYPE_jetlun_hs__NoResponse (10)
/* hs:NoResponse */
class SOAP_CMAC hs__NoResponse
{
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_jetlun_hs__NoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hs__NoResponse()  { }
	virtual ~hs__NoResponse() { }
};
#endif

#ifndef SOAP_TYPE_jetlun_hs__StartGwModuleRequest
#define SOAP_TYPE_jetlun_hs__StartGwModuleRequest (11)
/* hs:StartGwModuleRequest */
class SOAP_CMAC hs__StartGwModuleRequest
{
public:
	char admissionMode;	/* required element of type xsd:byte */
	char size;	/* required element of type xsd:byte */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_jetlun_hs__StartGwModuleRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hs__StartGwModuleRequest() : admissionMode(0), size(0) { }
	virtual ~hs__StartGwModuleRequest() { }
};
#endif

#ifndef SOAP_TYPE_jetlun_hs__startGwModule
#define SOAP_TYPE_jetlun_hs__startGwModule (14)
/* hs:startGwModule */
struct hs__startGwModule
{
public:
	hs__StartGwModuleRequest request;	/* required element of type hs:StartGwModuleRequest */
};
#endif

#ifndef SOAP_TYPE_jetlun_hs__getGwModuleStatusResponse
#define SOAP_TYPE_jetlun_hs__getGwModuleStatusResponse (17)
/* hs:getGwModuleStatusResponse */
struct hs__getGwModuleStatusResponse
{
public:
	int response;	/* RPC return element */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_jetlun_hs__getGwModuleStatus
#define SOAP_TYPE_jetlun_hs__getGwModuleStatus (18)
/* hs:getGwModuleStatus */
struct hs__getGwModuleStatus
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_jetlun_SOAP_ENV__Header
#define SOAP_TYPE_jetlun_SOAP_ENV__Header (19)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_jetlun_SOAP_ENV__Code
#define SOAP_TYPE_jetlun_SOAP_ENV__Code (20)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_jetlun_SOAP_ENV__Detail
#define SOAP_TYPE_jetlun_SOAP_ENV__Detail (22)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_jetlun_SOAP_ENV__Reason
#define SOAP_TYPE_jetlun_SOAP_ENV__Reason (25)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_jetlun_SOAP_ENV__Fault
#define SOAP_TYPE_jetlun_SOAP_ENV__Fault (26)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_jetlun__XML
#define SOAP_TYPE_jetlun__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_jetlun__QName
#define SOAP_TYPE_jetlun__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_jetlun_xsd__string
#define SOAP_TYPE_jetlun_xsd__string (7)
typedef std::string xsd__string;
#endif

#ifndef SOAP_TYPE_jetlun_xsd__byte
#define SOAP_TYPE_jetlun_xsd__byte (8)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_jetlun_xsd__int
#define SOAP_TYPE_jetlun_xsd__int (9)
typedef int xsd__int;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace jetlun


#endif

/* End of jetlunStub.h */
