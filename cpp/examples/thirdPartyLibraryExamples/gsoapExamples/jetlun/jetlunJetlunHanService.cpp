/* jetlunJetlunHanService.cpp
   Generated by gSOAP 2.7.9i from JetlunHan.hpp
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "jetlunJetlunHanService.h"

namespace jetlun {

JetlunHanService::JetlunHanService()
{	JetlunHanService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

JetlunHanService::JetlunHanService(soap_mode iomode)
{	JetlunHanService_init(iomode, iomode);
}

JetlunHanService::JetlunHanService(soap_mode imode, soap_mode omode)
{	JetlunHanService_init(imode, omode);
}

JetlunHanService::~JetlunHanService()
{ }

void JetlunHanService::JetlunHanService_init(soap_mode imode, soap_mode omode)
{	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"hs", "urn:JetlunHan", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_imode(this, imode);
	soap_omode(this, omode);
	if (!this->namespaces)
		this->namespaces = namespaces;
};

JetlunHanService *JetlunHanService::copy()
{	JetlunHanService *dup = new JetlunHanService();
	soap_copy_context(dup, this);
	return dup;
}

int JetlunHanService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

int JetlunHanService::accept()
{	return soap_accept(this);
}

int JetlunHanService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_hs__startGwModule(JetlunHanService*);
static int serve_hs__getGwModuleStatus(JetlunHanService*);

int JetlunHanService::dispatch()
{	if (soap_peek_element(this))
		return this->error;
	if (!soap_match_tag(this, this->tag, "hs:startGwModule"))
		return serve_hs__startGwModule(this);
	if (!soap_match_tag(this, this->tag, "hs:getGwModuleStatus"))
		return serve_hs__getGwModuleStatus(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_hs__startGwModule(JetlunHanService *soap)
{	struct hs__startGwModule soap_tmp_hs__startGwModule;
	hs__NoResponse response;
	response.soap_default(soap);
	soap_default_hs__startGwModule(soap, &soap_tmp_hs__startGwModule);
	soap->encodingStyle = "";
	if (!soap_get_hs__startGwModule(soap, &soap_tmp_hs__startGwModule, "hs:startGwModule", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->startGwModule(soap_tmp_hs__startGwModule.request, response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	response.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || response.soap_put(soap, "hs:NoResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || response.soap_put(soap, "hs:NoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_hs__getGwModuleStatus(JetlunHanService *soap)
{	struct hs__getGwModuleStatus soap_tmp_hs__getGwModuleStatus;
	struct hs__getGwModuleStatusResponse soap_tmp_hs__getGwModuleStatusResponse;
	soap_default_hs__getGwModuleStatusResponse(soap, &soap_tmp_hs__getGwModuleStatusResponse);
	soap_default_hs__getGwModuleStatus(soap, &soap_tmp_hs__getGwModuleStatus);
	soap->encodingStyle = "";
	if (!soap_get_hs__getGwModuleStatus(soap, &soap_tmp_hs__getGwModuleStatus, "hs:getGwModuleStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getGwModuleStatus(soap_tmp_hs__getGwModuleStatusResponse.response);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_hs__getGwModuleStatusResponse(soap, &soap_tmp_hs__getGwModuleStatusResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_hs__getGwModuleStatusResponse(soap, &soap_tmp_hs__getGwModuleStatusResponse, "hs:getGwModuleStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_hs__getGwModuleStatusResponse(soap, &soap_tmp_hs__getGwModuleStatusResponse, "hs:getGwModuleStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

} // namespace jetlun

/* End of server object code */
