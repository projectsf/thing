/* policynetcaStub.h
   Generated by gSOAP 2.7.9i from csr.hpp
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef policynetcaStub_H
#define policynetcaStub_H
#include <vector>
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace policynetca {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_policynetca_policynet__PKIStatus
#define SOAP_TYPE_policynetca_policynet__PKIStatus (21)
/* policynet:PKIStatus */
enum policynet__PKIStatus {Accepted = 0, GrantedWithMods = 1, Rejection = 2, Waiting = 3, RevocationWarning = 4, RevocationNotification = 5};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__PKIFailureInfo
#define SOAP_TYPE_policynetca_policynet__PKIFailureInfo (22)
/* policynet:PKIFailureInfo */
enum policynet__PKIFailureInfo {badAlg = 0, badMessageCheck = 1, badCertid = 2, badDataFormat = 3, badPOP = 4, certRevoked = 5, certConfirmed = 6, transactionIdInUse = 7, notAuthorized = 8, systemUnavail = 9, systemFailure = 10};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__PNService
#define SOAP_TYPE_policynetca_policynet__PNService (27)
/* policynet:PNService */
enum policynet__PNService {PolicyServer = 1, Webservice = 2, OOB = 3, MDM = 4, RA = 5, CA = 6, AAA = 7, UI = 8, OCSP = 9, DHCP = 10, DeviceFileImport = 11, Database = 12, Device = 13};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CRLReason
#define SOAP_TYPE_policynetca_policynet__CRLReason (47)
/* policynet:CRLReason */
enum policynet__CRLReason {Unspecified = 0, KeyCompromise = 1, CACompromise = 2, AffiliationChanged = 3, Superseded = 4, CessationOfOperation = 5, CertificateHold = 6, RemoveFromCRL = 7, PrivilegeWithdrawn = 8};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_policynetca__xop__Include
#define SOAP_TYPE_policynetca__xop__Include (6)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_policynetca_SOAP_ENV__Header
#define SOAP_TYPE_policynetca_SOAP_ENV__Header (11)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	char *policynet__LoginUsername;	/* optional element of type xsd:string */
	char *policynet__SessionId;	/* optional element of type xsd:string */
};
#endif

#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_policynetca_policynet__BinaryData
#define SOAP_TYPE_policynetca_policynet__BinaryData (19)
/* policynet:BinaryData */
struct policynet__BinaryData
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	char *xmime5__contentType;	/* optional attribute of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_policynetca_xsd__base64Binary
#define SOAP_TYPE_policynetca_xsd__base64Binary (20)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_policynetca_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), __size(0) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__PKIStatusInfo
#define SOAP_TYPE_policynetca_policynet__PKIStatusInfo (23)
/* policynet:PKIStatusInfo */
class SOAP_CMAC policynet__PKIStatusInfo
{
public:
	enum policynet__PKIStatus Status;	/* required element of type policynet:PKIStatus */
	enum policynet__PKIFailureInfo *FailureInfo;	/* optional element of type policynet:PKIFailureInfo */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_policynetca_policynet__PKIStatusInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__PKIStatusInfo() : Status((enum policynet__PKIStatus)0), FailureInfo(NULL) { }
	virtual ~policynet__PKIStatusInfo() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertId
#define SOAP_TYPE_policynetca_policynet__CertId (25)
/* policynet:CertId */
class SOAP_CMAC policynet__CertId
{
public:
	std::string Issuer;	/* required element of type xsd:string */
	std::string SerialNumber;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_policynetca_policynet__CertId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertId()  { }
	virtual ~policynet__CertId() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__SGDevice
#define SOAP_TYPE_policynetca_policynet__SGDevice (26)
/* policynet:SGDevice */
class SOAP_CMAC policynet__SGDevice
{
public:
	std::string McUID;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_policynetca_policynet__SGDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__SGDevice()  { }
	virtual ~policynet__SGDevice() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__EETypeUnion
#define SOAP_TYPE_policynetca_policynet__EETypeUnion (29)
/* xsd:choice */
union policynet__EETypeUnion
{
#define SOAP_UNION_policynet__EETypeUnion_Device	(1)
	policynet__SGDevice *Device;
#define SOAP_UNION_policynet__EETypeUnion_Service	(2)
	enum policynet__PNService Service;
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__EndEntityType
#define SOAP_TYPE_policynetca_policynet__EndEntityType (30)
/* Choice: */
struct policynet__EndEntityType
{
public:
	int __union;	/* union discriminant (of union defined below) */
	union policynet__EETypeUnion EEType;	/* required element of type xsd:choice */
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__PKCSCertificates
#define SOAP_TYPE_policynetca_policynet__PKCSCertificates (31)
/* policynet:PKCSCertificates */
class SOAP_CMAC policynet__PKCSCertificates
{
public:
	std::vector<std::string >Certificate;	/* optional element of type policynet:PKCS10 */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_policynetca_policynet__PKCSCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__PKCSCertificates()  { }
	virtual ~policynet__PKCSCertificates() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope
#define SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope (33)
/* policynet:PKCSDigitalEvenlope */
class SOAP_CMAC policynet__PKCSDigitalEvenlope
{
public:
	unsigned char IV[16];	/* required element of type Array16OfunsignedByte */
	struct policynet__BinaryData EncryptedSecretKey;	/* required element of type policynet:BinaryData */
	struct policynet__BinaryData EncryptedData;	/* required element of type policynet:BinaryData */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__PKCSDigitalEvenlope()  { }
	virtual ~policynet__PKCSDigitalEvenlope() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateSigning
#define SOAP_TYPE_policynetca_policynet__CertificateSigning (35)
/* policynet:CertificateSigning */
class SOAP_CMAC policynet__CertificateSigning
{
public:
	struct policynet__EndEntityType EndEntity;	/* required element of type policynet:EndEntityType */
	std::string CSR;	/* required element of type policynet:PKCS10 */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_policynetca_policynet__CertificateSigning */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertificateSigning()  { }
	virtual ~policynet__CertificateSigning() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateSigningResponse
#define SOAP_TYPE_policynetca_policynet__CertificateSigningResponse (36)
/* policynet:CertificateSigningResponse */
class SOAP_CMAC policynet__CertificateSigningResponse
{
public:
	policynet__PKIStatusInfo Status;	/* RPC return element */	/* required element of type policynet:PKIStatusInfo */
	std::string *ConfirmWaitTime;	/* optional element of type xsd:dateTime */
	policynet__PKCSDigitalEvenlope *POP;	/* optional element of type policynet:PKCSDigitalEvenlope */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_policynetca_policynet__CertificateSigningResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertificateSigningResponse() : ConfirmWaitTime(NULL), POP(NULL) { }
	virtual ~policynet__CertificateSigningResponse() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateSigningRequest
#define SOAP_TYPE_policynetca_policynet__CertificateSigningRequest (41)
/* policynet:CertificateSigningRequest */
struct policynet__CertificateSigningRequest
{
public:
	policynet__CertificateSigning Request;	/* required element of type policynet:CertificateSigning */
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateConfirm
#define SOAP_TYPE_policynetca_policynet__CertificateConfirm (42)
/* policynet:CertificateConfirm */
class SOAP_CMAC policynet__CertificateConfirm
{
public:
	policynet__CertId CertificateId;	/* required element of type policynet:CertId */
	struct policynet__BinaryData CertificateHash;	/* required element of type policynet:BinaryData */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_policynetca_policynet__CertificateConfirm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertificateConfirm()  { }
	virtual ~policynet__CertificateConfirm() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse
#define SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse (43)
/* policynet:CertificateConfirmResponse */
class SOAP_CMAC policynet__CertificateConfirmResponse
{
public:
	policynet__PKIStatusInfo Status;	/* RPC return element */	/* required element of type policynet:PKIStatusInfo */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertificateConfirmResponse()  { }
	virtual ~policynet__CertificateConfirmResponse() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest
#define SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest (46)
/* policynet:CertificateConfirmRequest */
struct policynet__CertificateConfirmRequest
{
public:
	policynet__CertificateConfirm Confirm;	/* required element of type policynet:CertificateConfirm */
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateRevocation
#define SOAP_TYPE_policynetca_policynet__CertificateRevocation (48)
/* policynet:CertificateRevocation */
class SOAP_CMAC policynet__CertificateRevocation
{
public:
	policynet__CertId CertId;	/* required element of type policynet:CertId */
	enum policynet__CRLReason Reason;	/* required element of type policynet:CRLReason */
	std::string InvalidityDate;	/* required element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_policynetca_policynet__CertificateRevocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertificateRevocation() : Reason((enum policynet__CRLReason)0) { }
	virtual ~policynet__CertificateRevocation() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse
#define SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse (49)
/* policynet:CertificateRevocationResponse */
class SOAP_CMAC policynet__CertificateRevocationResponse
{
public:
	policynet__PKIStatusInfo Status;	/* RPC return element */	/* required element of type policynet:PKIStatusInfo */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertificateRevocationResponse()  { }
	virtual ~policynet__CertificateRevocationResponse() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest
#define SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest (52)
/* policynet:CertificateRevocationRequest */
struct policynet__CertificateRevocationRequest
{
public:
	std::string SenderCertificate;	/* required element of type policynet:PKCS10 */
	policynet__CertificateRevocation CertRev;	/* required element of type policynet:CertificateRevocation */
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse
#define SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse (53)
/* policynet:CertificateRevocationListResponse */
class SOAP_CMAC policynet__CertificateRevocationListResponse
{
public:
	policynet__PKIStatusInfo Status;	/* RPC return element */	/* required element of type policynet:PKIStatusInfo */
	char *CRL;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         policynet__CertificateRevocationListResponse() : CRL(NULL) { }
	virtual ~policynet__CertificateRevocationListResponse() { }
};
#endif

#ifndef SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest
#define SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest (58)
/* policynet:CertificateRevocationListRequest */
struct policynet__CertificateRevocationListRequest
{
public:
	void *_param_1;	/* transient */
};
#endif

#ifndef SOAP_TYPE_policynetca_SOAP_ENV__Code
#define SOAP_TYPE_policynetca_SOAP_ENV__Code (59)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_policynetca_SOAP_ENV__Detail
#define SOAP_TYPE_policynetca_SOAP_ENV__Detail (61)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_policynetca_SOAP_ENV__Reason
#define SOAP_TYPE_policynetca_SOAP_ENV__Reason (62)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_policynetca_SOAP_ENV__Fault
#define SOAP_TYPE_policynetca_SOAP_ENV__Fault (63)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_policynetca__XML
#define SOAP_TYPE_policynetca__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_policynetca__QName
#define SOAP_TYPE_policynetca__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_policynetca_xsd__positiveInteger
#define SOAP_TYPE_policynetca_xsd__positiveInteger (12)
typedef unsigned int xsd__positiveInteger;
#endif

#ifndef SOAP_TYPE_policynetca_xsd__string
#define SOAP_TYPE_policynetca_xsd__string (14)
typedef std::string xsd__string;
#endif

#ifndef SOAP_TYPE_policynetca_policynet__PKCS10
#define SOAP_TYPE_policynetca_policynet__PKCS10 (15)
typedef std::string policynet__PKCS10;
#endif

#ifndef SOAP_TYPE_policynetca_policynet__UserName
#define SOAP_TYPE_policynetca_policynet__UserName (16)
typedef std::string policynet__UserName;
#endif

#ifndef SOAP_TYPE_policynetca_policynet__LoginPassword
#define SOAP_TYPE_policynetca_policynet__LoginPassword (17)
typedef std::string policynet__LoginPassword;
#endif

#ifndef SOAP_TYPE_policynetca_xsd__dateTime
#define SOAP_TYPE_policynetca_xsd__dateTime (18)
typedef std::string xsd__dateTime;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/

typedef struct _xop__Include _xop__Include;

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace policynetca


#endif

/* End of policynetcaStub.h */
