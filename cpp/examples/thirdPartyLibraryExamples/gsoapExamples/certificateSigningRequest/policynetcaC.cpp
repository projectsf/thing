/* policynetcaC.cpp
   Generated by gSOAP 2.7.9i from csr.hpp
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "policynetcaH.h"

namespace policynetca {

SOAP_SOURCE_STAMP("@(#) policynetcaC.cpp ver 2.7.9i 2010-03-25 23:39:17 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_policynetca_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_policynetca_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_policynetca_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_policynetca_xsd__positiveInteger:
		return soap_in_xsd__positiveInteger(soap, NULL, NULL, "xsd:positiveInteger");
	case SOAP_TYPE_policynetca_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_policynetca_policynet__CRLReason:
		return soap_in_policynet__CRLReason(soap, NULL, NULL, "policynet:CRLReason");
	case SOAP_TYPE_policynetca_policynet__PNService:
		return soap_in_policynet__PNService(soap, NULL, NULL, "policynet:PNService");
	case SOAP_TYPE_policynetca_policynet__PKIFailureInfo:
		return soap_in_policynet__PKIFailureInfo(soap, NULL, NULL, "policynet:PKIFailureInfo");
	case SOAP_TYPE_policynetca_policynet__PKIStatus:
		return soap_in_policynet__PKIStatus(soap, NULL, NULL, "policynet:PKIStatus");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse:
		return soap_in_policynet__CertificateRevocationListResponse(soap, NULL, NULL, "policynet:CertificateRevocationListResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse:
		return soap_in_policynet__CertificateRevocationResponse(soap, NULL, NULL, "policynet:CertificateRevocationResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocation:
		return soap_in_policynet__CertificateRevocation(soap, NULL, NULL, "policynet:CertificateRevocation");
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse:
		return soap_in_policynet__CertificateConfirmResponse(soap, NULL, NULL, "policynet:CertificateConfirmResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateConfirm:
		return soap_in_policynet__CertificateConfirm(soap, NULL, NULL, "policynet:CertificateConfirm");
	case SOAP_TYPE_policynetca_policynet__CertificateSigningResponse:
		return soap_in_policynet__CertificateSigningResponse(soap, NULL, NULL, "policynet:CertificateSigningResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateSigning:
		return soap_in_policynet__CertificateSigning(soap, NULL, NULL, "policynet:CertificateSigning");
	case SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope:
		return soap_in_policynet__PKCSDigitalEvenlope(soap, NULL, NULL, "policynet:PKCSDigitalEvenlope");
	case SOAP_TYPE_policynetca_policynet__PKCSCertificates:
		return soap_in_policynet__PKCSCertificates(soap, NULL, NULL, "policynet:PKCSCertificates");
	case SOAP_TYPE_policynetca_policynet__SGDevice:
		return soap_in_policynet__SGDevice(soap, NULL, NULL, "policynet:SGDevice");
	case SOAP_TYPE_policynetca_policynet__CertId:
		return soap_in_policynet__CertId(soap, NULL, NULL, "policynet:CertId");
	case SOAP_TYPE_policynetca_policynet__PKIStatusInfo:
		return soap_in_policynet__PKIStatusInfo(soap, NULL, NULL, "policynet:PKIStatusInfo");
	case SOAP_TYPE_policynetca_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_policynetca_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_policynetca_policynet__LoginPassword:
		return soap_in_policynet__LoginPassword(soap, NULL, NULL, "policynet:LoginPassword");
	case SOAP_TYPE_policynetca_policynet__UserName:
		return soap_in_policynet__UserName(soap, NULL, NULL, "policynet:UserName");
	case SOAP_TYPE_policynetca_policynet__PKCS10:
		return soap_in_policynet__PKCS10(soap, NULL, NULL, "policynet:PKCS10");
	case SOAP_TYPE_policynetca_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_policynetca_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest:
		return soap_in_policynet__CertificateRevocationListRequest(soap, NULL, NULL, "policynet:CertificateRevocationListRequest");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest:
		return soap_in_policynet__CertificateRevocationRequest(soap, NULL, NULL, "policynet:CertificateRevocationRequest");
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest:
		return soap_in_policynet__CertificateConfirmRequest(soap, NULL, NULL, "policynet:CertificateConfirmRequest");
	case SOAP_TYPE_policynetca_policynet__CertificateSigningRequest:
		return soap_in_policynet__CertificateSigningRequest(soap, NULL, NULL, "policynet:CertificateSigningRequest");
	case SOAP_TYPE_policynetca_policynet__EndEntityType:
		return soap_in_policynet__EndEntityType(soap, NULL, NULL, "policynet:EndEntityType");
	case SOAP_TYPE_policynetca_policynet__BinaryData:
		return soap_in_policynet__BinaryData(soap, NULL, NULL, "policynet:BinaryData");
	case SOAP_TYPE_policynetca_PointerTopolicynet__PKCSDigitalEvenlope:
		return soap_in_PointerTopolicynet__PKCSDigitalEvenlope(soap, NULL, NULL, "policynet:PKCSDigitalEvenlope");
	case SOAP_TYPE_policynetca_PointerToxsd__dateTime:
		return soap_in_PointerToxsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_policynetca_PointerTopolicynet__SGDevice:
		return soap_in_PointerTopolicynet__SGDevice(soap, NULL, NULL, "policynet:SGDevice");
	case SOAP_TYPE_policynetca_PointerTopolicynet__PKIFailureInfo:
		return soap_in_PointerTopolicynet__PKIFailureInfo(soap, NULL, NULL, "policynet:PKIFailureInfo");
	case SOAP_TYPE_policynetca_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_policynetca_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_policynetca_Array16OfunsignedByte:
		return soap_in_Array16OfunsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "policynet:CertificateRevocationListResponse"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse;
			return soap_in_policynet__CertificateRevocationListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateRevocationResponse"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse;
			return soap_in_policynet__CertificateRevocationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateRevocation"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateRevocation;
			return soap_in_policynet__CertificateRevocation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateConfirmResponse"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse;
			return soap_in_policynet__CertificateConfirmResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateConfirm"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateConfirm;
			return soap_in_policynet__CertificateConfirm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateSigningResponse"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateSigningResponse;
			return soap_in_policynet__CertificateSigningResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateSigning"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateSigning;
			return soap_in_policynet__CertificateSigning(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:PKCSDigitalEvenlope"))
		{	*type = SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope;
			return soap_in_policynet__PKCSDigitalEvenlope(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:PKCSCertificates"))
		{	*type = SOAP_TYPE_policynetca_policynet__PKCSCertificates;
			return soap_in_policynet__PKCSCertificates(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:SGDevice"))
		{	*type = SOAP_TYPE_policynetca_policynet__SGDevice;
			return soap_in_policynet__SGDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertId"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertId;
			return soap_in_policynet__CertId(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:PKIStatusInfo"))
		{	*type = SOAP_TYPE_policynetca_policynet__PKIStatusInfo;
			return soap_in_policynet__PKIStatusInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_policynetca_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_policynetca_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:LoginPassword"))
		{	*type = SOAP_TYPE_policynetca_policynet__LoginPassword;
			return soap_in_policynet__LoginPassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:UserName"))
		{	*type = SOAP_TYPE_policynetca_policynet__UserName;
			return soap_in_policynet__UserName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:PKCS10"))
		{	*type = SOAP_TYPE_policynetca_policynet__PKCS10;
			return soap_in_policynet__PKCS10(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_policynetca_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_policynetca_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_policynetca_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_policynetca_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_policynetca_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:positiveInteger"))
		{	*type = SOAP_TYPE_policynetca_xsd__positiveInteger;
			return soap_in_xsd__positiveInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_policynetca_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CRLReason"))
		{	*type = SOAP_TYPE_policynetca_policynet__CRLReason;
			return soap_in_policynet__CRLReason(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:PNService"))
		{	*type = SOAP_TYPE_policynetca_policynet__PNService;
			return soap_in_policynet__PNService(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:PKIFailureInfo"))
		{	*type = SOAP_TYPE_policynetca_policynet__PKIFailureInfo;
			return soap_in_policynet__PKIFailureInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:PKIStatus"))
		{	*type = SOAP_TYPE_policynetca_policynet__PKIStatus;
			return soap_in_policynet__PKIStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateRevocationListRequest"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest;
			return soap_in_policynet__CertificateRevocationListRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateRevocationRequest"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest;
			return soap_in_policynet__CertificateRevocationRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateConfirmRequest"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest;
			return soap_in_policynet__CertificateConfirmRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:CertificateSigningRequest"))
		{	*type = SOAP_TYPE_policynetca_policynet__CertificateSigningRequest;
			return soap_in_policynet__CertificateSigningRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:EndEntityType"))
		{	*type = SOAP_TYPE_policynetca_policynet__EndEntityType;
			return soap_in_policynet__EndEntityType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "policynet:BinaryData"))
		{	*type = SOAP_TYPE_policynetca_policynet__BinaryData;
			return soap_in_policynet__BinaryData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_policynetca_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_policynetca_Array16OfunsignedByte;
			return soap_in_Array16OfunsignedByte(soap, NULL, NULL, NULL);
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xop:Include"))
		{	*type = SOAP_TYPE_policynetca__xop__Include;
			return soap_in__xop__Include(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_policynetca__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_policynetca_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_policynetca_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_policynetca_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_policynetca_xsd__positiveInteger:
		return soap_out_xsd__positiveInteger(soap, tag, id, (const unsigned int *)ptr, "xsd:positiveInteger");
	case SOAP_TYPE_policynetca_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_policynetca_policynet__CRLReason:
		return soap_out_policynet__CRLReason(soap, tag, id, (const enum policynet__CRLReason *)ptr, "policynet:CRLReason");
	case SOAP_TYPE_policynetca_policynet__PNService:
		return soap_out_policynet__PNService(soap, tag, id, (const enum policynet__PNService *)ptr, "policynet:PNService");
	case SOAP_TYPE_policynetca_policynet__PKIFailureInfo:
		return soap_out_policynet__PKIFailureInfo(soap, tag, id, (const enum policynet__PKIFailureInfo *)ptr, "policynet:PKIFailureInfo");
	case SOAP_TYPE_policynetca_policynet__PKIStatus:
		return soap_out_policynet__PKIStatus(soap, tag, id, (const enum policynet__PKIStatus *)ptr, "policynet:PKIStatus");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse:
		return ((policynet__CertificateRevocationListResponse *)ptr)->soap_out(soap, tag, id, "policynet:CertificateRevocationListResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse:
		return ((policynet__CertificateRevocationResponse *)ptr)->soap_out(soap, tag, id, "policynet:CertificateRevocationResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocation:
		return ((policynet__CertificateRevocation *)ptr)->soap_out(soap, tag, id, "policynet:CertificateRevocation");
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse:
		return ((policynet__CertificateConfirmResponse *)ptr)->soap_out(soap, tag, id, "policynet:CertificateConfirmResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateConfirm:
		return ((policynet__CertificateConfirm *)ptr)->soap_out(soap, tag, id, "policynet:CertificateConfirm");
	case SOAP_TYPE_policynetca_policynet__CertificateSigningResponse:
		return ((policynet__CertificateSigningResponse *)ptr)->soap_out(soap, tag, id, "policynet:CertificateSigningResponse");
	case SOAP_TYPE_policynetca_policynet__CertificateSigning:
		return ((policynet__CertificateSigning *)ptr)->soap_out(soap, tag, id, "policynet:CertificateSigning");
	case SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope:
		return ((policynet__PKCSDigitalEvenlope *)ptr)->soap_out(soap, tag, id, "policynet:PKCSDigitalEvenlope");
	case SOAP_TYPE_policynetca_policynet__PKCSCertificates:
		return ((policynet__PKCSCertificates *)ptr)->soap_out(soap, tag, id, "policynet:PKCSCertificates");
	case SOAP_TYPE_policynetca_policynet__SGDevice:
		return ((policynet__SGDevice *)ptr)->soap_out(soap, tag, id, "policynet:SGDevice");
	case SOAP_TYPE_policynetca_policynet__CertId:
		return ((policynet__CertId *)ptr)->soap_out(soap, tag, id, "policynet:CertId");
	case SOAP_TYPE_policynetca_policynet__PKIStatusInfo:
		return ((policynet__PKIStatusInfo *)ptr)->soap_out(soap, tag, id, "policynet:PKIStatusInfo");
	case SOAP_TYPE_policynetca_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_policynetca_xsd__dateTime:
		return soap_out_xsd__dateTime(soap, tag, id, (const std::string *)ptr, "xsd:dateTime");
	case SOAP_TYPE_policynetca_policynet__LoginPassword:
		return soap_out_policynet__LoginPassword(soap, tag, id, (const std::string *)ptr, "policynet:LoginPassword");
	case SOAP_TYPE_policynetca_policynet__UserName:
		return soap_out_policynet__UserName(soap, tag, id, (const std::string *)ptr, "policynet:UserName");
	case SOAP_TYPE_policynetca_policynet__PKCS10:
		return soap_out_policynet__PKCS10(soap, tag, id, (const std::string *)ptr, "policynet:PKCS10");
	case SOAP_TYPE_policynetca_xsd__string:
		return soap_out_xsd__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_policynetca_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest:
		return soap_out_policynet__CertificateRevocationListRequest(soap, tag, id, (const struct policynet__CertificateRevocationListRequest *)ptr, "policynet:CertificateRevocationListRequest");
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest:
		return soap_out_policynet__CertificateRevocationRequest(soap, tag, id, (const struct policynet__CertificateRevocationRequest *)ptr, "policynet:CertificateRevocationRequest");
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest:
		return soap_out_policynet__CertificateConfirmRequest(soap, tag, id, (const struct policynet__CertificateConfirmRequest *)ptr, "policynet:CertificateConfirmRequest");
	case SOAP_TYPE_policynetca_policynet__CertificateSigningRequest:
		return soap_out_policynet__CertificateSigningRequest(soap, tag, id, (const struct policynet__CertificateSigningRequest *)ptr, "policynet:CertificateSigningRequest");
	case SOAP_TYPE_policynetca_policynet__EndEntityType:
		return soap_out_policynet__EndEntityType(soap, tag, id, (const struct policynet__EndEntityType *)ptr, "policynet:EndEntityType");
	case SOAP_TYPE_policynetca_policynet__BinaryData:
		return soap_out_policynet__BinaryData(soap, tag, id, (const struct policynet__BinaryData *)ptr, "policynet:BinaryData");
	case SOAP_TYPE_policynetca__xop__Include:
		return soap_out__xop__Include(soap, "xop:Include", id, (const struct _xop__Include *)ptr, NULL);
	case SOAP_TYPE_policynetca_PointerTopolicynet__PKCSDigitalEvenlope:
		return soap_out_PointerTopolicynet__PKCSDigitalEvenlope(soap, tag, id, (policynet__PKCSDigitalEvenlope *const*)ptr, "policynet:PKCSDigitalEvenlope");
	case SOAP_TYPE_policynetca_PointerToxsd__dateTime:
		return soap_out_PointerToxsd__dateTime(soap, tag, id, (std::string *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_policynetca_PointerTopolicynet__SGDevice:
		return soap_out_PointerTopolicynet__SGDevice(soap, tag, id, (policynet__SGDevice *const*)ptr, "policynet:SGDevice");
	case SOAP_TYPE_policynetca_PointerTopolicynet__PKIFailureInfo:
		return soap_out_PointerTopolicynet__PKIFailureInfo(soap, tag, id, (enum policynet__PKIFailureInfo *const*)ptr, "policynet:PKIFailureInfo");
	case SOAP_TYPE_policynetca_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_policynetca__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_policynetca_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	case SOAP_TYPE_policynetca_Array16OfunsignedByte:
		return soap_out_Array16OfunsignedByte(soap, tag, id, (unsigned char (*))ptr, "xsd:unsignedByte");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse:
		((policynet__CertificateRevocationListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse:
		((policynet__CertificateRevocationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocation:
		((policynet__CertificateRevocation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse:
		((policynet__CertificateConfirmResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateConfirm:
		((policynet__CertificateConfirm *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateSigningResponse:
		((policynet__CertificateSigningResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateSigning:
		((policynet__CertificateSigning *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope:
		((policynet__PKCSDigitalEvenlope *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__PKCSCertificates:
		((policynet__PKCSCertificates *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__SGDevice:
		((policynet__SGDevice *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__CertId:
		((policynet__CertId *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_policynet__PKIStatusInfo:
		((policynet__PKIStatusInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_policynetca_xsd__dateTime:
		soap_serialize_xsd__dateTime(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__LoginPassword:
		soap_serialize_policynet__LoginPassword(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__UserName:
		soap_serialize_policynet__UserName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__PKCS10:
		soap_serialize_policynet__PKCS10(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_policynetca_xsd__string:
		soap_serialize_xsd__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_policynetca_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest:
		soap_serialize_policynet__CertificateRevocationListRequest(soap, (const struct policynet__CertificateRevocationListRequest *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest:
		soap_serialize_policynet__CertificateRevocationRequest(soap, (const struct policynet__CertificateRevocationRequest *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest:
		soap_serialize_policynet__CertificateConfirmRequest(soap, (const struct policynet__CertificateConfirmRequest *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateSigningRequest:
		soap_serialize_policynet__CertificateSigningRequest(soap, (const struct policynet__CertificateSigningRequest *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__EndEntityType:
		soap_serialize_policynet__EndEntityType(soap, (const struct policynet__EndEntityType *)ptr);
		break;
	case SOAP_TYPE_policynetca_policynet__BinaryData:
		soap_serialize_policynet__BinaryData(soap, (const struct policynet__BinaryData *)ptr);
		break;
	case SOAP_TYPE_policynetca__xop__Include:
		soap_serialize__xop__Include(soap, (const struct _xop__Include *)ptr);
		break;
	case SOAP_TYPE_policynetca_PointerTopolicynet__PKCSDigitalEvenlope:
		soap_serialize_PointerTopolicynet__PKCSDigitalEvenlope(soap, (policynet__PKCSDigitalEvenlope *const*)ptr);
		break;
	case SOAP_TYPE_policynetca_PointerToxsd__dateTime:
		soap_serialize_PointerToxsd__dateTime(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_policynetca_PointerTopolicynet__SGDevice:
		soap_serialize_PointerTopolicynet__SGDevice(soap, (policynet__SGDevice *const*)ptr);
		break;
	case SOAP_TYPE_policynetca_PointerTopolicynet__PKIFailureInfo:
		soap_serialize_PointerTopolicynet__PKIFailureInfo(soap, (enum policynet__PKIFailureInfo *const*)ptr);
		break;
	case SOAP_TYPE_policynetca_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_policynetca__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_policynetca_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_policynetca_Array16OfunsignedByte:
		soap_serialize_Array16OfunsignedByte(soap, (unsigned char (*))ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_policynetca__xop__Include:
		return (void*)soap_instantiate__xop__Include(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_policynetca_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_policynetca_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__BinaryData:
		return (void*)soap_instantiate_policynet__BinaryData(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__PKIStatusInfo:
		return (void*)soap_instantiate_policynet__PKIStatusInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertId:
		return (void*)soap_instantiate_policynet__CertId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__SGDevice:
		return (void*)soap_instantiate_policynet__SGDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__EndEntityType:
		return (void*)soap_instantiate_policynet__EndEntityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__PKCSCertificates:
		return (void*)soap_instantiate_policynet__PKCSCertificates(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope:
		return (void*)soap_instantiate_policynet__PKCSDigitalEvenlope(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateSigning:
		return (void*)soap_instantiate_policynet__CertificateSigning(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateSigningResponse:
		return (void*)soap_instantiate_policynet__CertificateSigningResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateSigningRequest:
		return (void*)soap_instantiate_policynet__CertificateSigningRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateConfirm:
		return (void*)soap_instantiate_policynet__CertificateConfirm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse:
		return (void*)soap_instantiate_policynet__CertificateConfirmResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest:
		return (void*)soap_instantiate_policynet__CertificateConfirmRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateRevocation:
		return (void*)soap_instantiate_policynet__CertificateRevocation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse:
		return (void*)soap_instantiate_policynet__CertificateRevocationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest:
		return (void*)soap_instantiate_policynet__CertificateRevocationRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse:
		return (void*)soap_instantiate_policynet__CertificateRevocationListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest:
		return (void*)soap_instantiate_policynet__CertificateRevocationListRequest(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_policynetca_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_policynetca_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_policynetca_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_policynetca_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_policynetca_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__PKCS10:
		return (void*)soap_instantiate_policynet__PKCS10(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__UserName:
		return (void*)soap_instantiate_policynet__UserName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_policynet__LoginPassword:
		return (void*)soap_instantiate_policynet__LoginPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_policynetca_std__vectorTemplateOfpolicynet__PKCS10:
		return (void*)soap_instantiate_std__vectorTemplateOfpolicynet__PKCS10(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_policynetca__xop__Include:
		if (p->size < 0)
			delete (struct _xop__Include*)p->ptr;
		else
			delete[] (struct _xop__Include*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__BinaryData:
		if (p->size < 0)
			delete (struct policynet__BinaryData*)p->ptr;
		else
			delete[] (struct policynet__BinaryData*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__PKIStatusInfo:
		if (p->size < 0)
			delete (policynet__PKIStatusInfo*)p->ptr;
		else
			delete[] (policynet__PKIStatusInfo*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertId:
		if (p->size < 0)
			delete (policynet__CertId*)p->ptr;
		else
			delete[] (policynet__CertId*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__SGDevice:
		if (p->size < 0)
			delete (policynet__SGDevice*)p->ptr;
		else
			delete[] (policynet__SGDevice*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__EndEntityType:
		if (p->size < 0)
			delete (struct policynet__EndEntityType*)p->ptr;
		else
			delete[] (struct policynet__EndEntityType*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__PKCSCertificates:
		if (p->size < 0)
			delete (policynet__PKCSCertificates*)p->ptr;
		else
			delete[] (policynet__PKCSCertificates*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope:
		if (p->size < 0)
			delete (policynet__PKCSDigitalEvenlope*)p->ptr;
		else
			delete[] (policynet__PKCSDigitalEvenlope*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateSigning:
		if (p->size < 0)
			delete (policynet__CertificateSigning*)p->ptr;
		else
			delete[] (policynet__CertificateSigning*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateSigningResponse:
		if (p->size < 0)
			delete (policynet__CertificateSigningResponse*)p->ptr;
		else
			delete[] (policynet__CertificateSigningResponse*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateSigningRequest:
		if (p->size < 0)
			delete (struct policynet__CertificateSigningRequest*)p->ptr;
		else
			delete[] (struct policynet__CertificateSigningRequest*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateConfirm:
		if (p->size < 0)
			delete (policynet__CertificateConfirm*)p->ptr;
		else
			delete[] (policynet__CertificateConfirm*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse:
		if (p->size < 0)
			delete (policynet__CertificateConfirmResponse*)p->ptr;
		else
			delete[] (policynet__CertificateConfirmResponse*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest:
		if (p->size < 0)
			delete (struct policynet__CertificateConfirmRequest*)p->ptr;
		else
			delete[] (struct policynet__CertificateConfirmRequest*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocation:
		if (p->size < 0)
			delete (policynet__CertificateRevocation*)p->ptr;
		else
			delete[] (policynet__CertificateRevocation*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse:
		if (p->size < 0)
			delete (policynet__CertificateRevocationResponse*)p->ptr;
		else
			delete[] (policynet__CertificateRevocationResponse*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest:
		if (p->size < 0)
			delete (struct policynet__CertificateRevocationRequest*)p->ptr;
		else
			delete[] (struct policynet__CertificateRevocationRequest*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse:
		if (p->size < 0)
			delete (policynet__CertificateRevocationListResponse*)p->ptr;
		else
			delete[] (policynet__CertificateRevocationListResponse*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest:
		if (p->size < 0)
			delete (struct policynet__CertificateRevocationListRequest*)p->ptr;
		else
			delete[] (struct policynet__CertificateRevocationListRequest*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_xsd__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__PKCS10:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__UserName:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_policynet__LoginPassword:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_xsd__dateTime:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_policynetca_std__vectorTemplateOfpolicynet__PKCS10:
		if (p->size < 0)
			delete (std::vector<std::string >*)p->ptr;
		else
			delete[] (std::vector<std::string >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_policynetca_std__vectorTemplateOfpolicynet__PKCS10:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_policynetca_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	char * retValue = soap_inbyte(soap, tag, a, type, SOAP_TYPE_policynetca_byte);
	return retValue;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_policynetca_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	int * retValue = soap_inint(soap, tag, a, type, SOAP_TYPE_policynetca_int);
	return retValue;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_policynetca_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	unsigned char * retValue = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_policynetca_unsignedByte);
	return retValue;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__positiveInteger(struct soap *soap, unsigned int *a)
{	soap_default_unsignedInt(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_xsd__positiveInteger);
	if (soap_out_xsd__positiveInteger(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_policynetca_xsd__positiveInteger);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__positiveInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	unsigned int * retValue = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_policynetca_xsd__positiveInteger);
	return retValue;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_policynetca_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	unsigned int * retValue = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_policynetca_unsignedInt);
	return retValue;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__CRLReason(struct soap *soap, enum policynet__CRLReason *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_policynet__CRLReason
	*a = SOAP_DEFAULT_policynet__CRLReason;
#else
	*a = (enum policynet__CRLReason)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__CRLReason(struct soap *soap, const enum policynet__CRLReason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CRLReason);
	if (soap_out_policynet__CRLReason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_policynet__CRLReason[] =
{	{ (long)Unspecified, "Unspecified" },
	{ (long)KeyCompromise, "KeyCompromise" },
	{ (long)CACompromise, "CACompromise" },
	{ (long)AffiliationChanged, "AffiliationChanged" },
	{ (long)Superseded, "Superseded" },
	{ (long)CessationOfOperation, "CessationOfOperation" },
	{ (long)CertificateHold, "CertificateHold" },
	{ (long)RemoveFromCRL, "RemoveFromCRL" },
	{ (long)PrivilegeWithdrawn, "PrivilegeWithdrawn" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_policynet__CRLReason2s(struct soap *soap, enum policynet__CRLReason n)
{	const char *s = soap_code_str(soap_codes_policynet__CRLReason, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CRLReason(struct soap *soap, const char *tag, int id, const enum policynet__CRLReason *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CRLReason), type);
	soap_send(soap, soap_policynet__CRLReason2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum policynet__CRLReason * SOAP_FMAC4 soap_get_policynet__CRLReason(struct soap *soap, enum policynet__CRLReason *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CRLReason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2policynet__CRLReason(struct soap *soap, const char *s, enum policynet__CRLReason *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_policynet__CRLReason, s);
	if (map)
		*a = (enum policynet__CRLReason)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 8)))
			return soap->error = SOAP_TYPE;
		*a = (enum policynet__CRLReason)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum policynet__CRLReason * SOAP_FMAC4 soap_in_policynet__CRLReason(struct soap *soap, const char *tag, enum policynet__CRLReason *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum policynet__CRLReason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CRLReason, sizeof(enum policynet__CRLReason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2policynet__CRLReason(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum policynet__CRLReason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CRLReason, 0, sizeof(enum policynet__CRLReason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__PNService(struct soap *soap, enum policynet__PNService *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_policynet__PNService
	*a = SOAP_DEFAULT_policynet__PNService;
#else
	*a = (enum policynet__PNService)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__PNService(struct soap *soap, const enum policynet__PNService *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__PNService);
	if (soap_out_policynet__PNService(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_policynet__PNService[] =
{	{ (long)PolicyServer, "PolicyServer" },
	{ (long)Webservice, "Webservice" },
	{ (long)OOB, "OOB" },
	{ (long)MDM, "MDM" },
	{ (long)RA, "RA" },
	{ (long)CA, "CA" },
	{ (long)AAA, "AAA" },
	{ (long)UI, "UI" },
	{ (long)OCSP, "OCSP" },
	{ (long)DHCP, "DHCP" },
	{ (long)DeviceFileImport, "DeviceFileImport" },
	{ (long)Database, "Database" },
	{ (long)Device, "Device" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_policynet__PNService2s(struct soap *soap, enum policynet__PNService n)
{	const char *s = soap_code_str(soap_codes_policynet__PNService, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__PNService(struct soap *soap, const char *tag, int id, const enum policynet__PNService *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__PNService), type);
	soap_send(soap, soap_policynet__PNService2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum policynet__PNService * SOAP_FMAC4 soap_get_policynet__PNService(struct soap *soap, enum policynet__PNService *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__PNService(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2policynet__PNService(struct soap *soap, const char *s, enum policynet__PNService *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_policynet__PNService, s);
	if (map)
		*a = (enum policynet__PNService)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 13)))
			return soap->error = SOAP_TYPE;
		*a = (enum policynet__PNService)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum policynet__PNService * SOAP_FMAC4 soap_in_policynet__PNService(struct soap *soap, const char *tag, enum policynet__PNService *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum policynet__PNService *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__PNService, sizeof(enum policynet__PNService), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2policynet__PNService(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum policynet__PNService *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__PNService, 0, sizeof(enum policynet__PNService), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__PKIFailureInfo(struct soap *soap, enum policynet__PKIFailureInfo *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_policynet__PKIFailureInfo
	*a = SOAP_DEFAULT_policynet__PKIFailureInfo;
#else
	*a = (enum policynet__PKIFailureInfo)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__PKIFailureInfo(struct soap *soap, const enum policynet__PKIFailureInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__PKIFailureInfo);
	if (soap_out_policynet__PKIFailureInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_policynet__PKIFailureInfo[] =
{	{ (long)badAlg, "badAlg" },
	{ (long)badMessageCheck, "badMessageCheck" },
	{ (long)badCertid, "badCertid" },
	{ (long)badDataFormat, "badDataFormat" },
	{ (long)badPOP, "badPOP" },
	{ (long)certRevoked, "certRevoked" },
	{ (long)certConfirmed, "certConfirmed" },
	{ (long)transactionIdInUse, "transactionIdInUse" },
	{ (long)notAuthorized, "notAuthorized" },
	{ (long)systemUnavail, "systemUnavail" },
	{ (long)systemFailure, "systemFailure" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_policynet__PKIFailureInfo2s(struct soap *soap, enum policynet__PKIFailureInfo n)
{	const char *s = soap_code_str(soap_codes_policynet__PKIFailureInfo, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__PKIFailureInfo(struct soap *soap, const char *tag, int id, const enum policynet__PKIFailureInfo *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__PKIFailureInfo), type);
	soap_send(soap, soap_policynet__PKIFailureInfo2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum policynet__PKIFailureInfo * SOAP_FMAC4 soap_get_policynet__PKIFailureInfo(struct soap *soap, enum policynet__PKIFailureInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__PKIFailureInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2policynet__PKIFailureInfo(struct soap *soap, const char *s, enum policynet__PKIFailureInfo *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_policynet__PKIFailureInfo, s);
	if (map)
		*a = (enum policynet__PKIFailureInfo)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 10)))
			return soap->error = SOAP_TYPE;
		*a = (enum policynet__PKIFailureInfo)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum policynet__PKIFailureInfo * SOAP_FMAC4 soap_in_policynet__PKIFailureInfo(struct soap *soap, const char *tag, enum policynet__PKIFailureInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum policynet__PKIFailureInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__PKIFailureInfo, sizeof(enum policynet__PKIFailureInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2policynet__PKIFailureInfo(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum policynet__PKIFailureInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__PKIFailureInfo, 0, sizeof(enum policynet__PKIFailureInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__PKIStatus(struct soap *soap, enum policynet__PKIStatus *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_policynet__PKIStatus
	*a = SOAP_DEFAULT_policynet__PKIStatus;
#else
	*a = (enum policynet__PKIStatus)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__PKIStatus(struct soap *soap, const enum policynet__PKIStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__PKIStatus);
	if (soap_out_policynet__PKIStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_policynet__PKIStatus[] =
{	{ (long)Accepted, "Accepted" },
	{ (long)GrantedWithMods, "GrantedWithMods" },
	{ (long)Rejection, "Rejection" },
	{ (long)Waiting, "Waiting" },
	{ (long)RevocationWarning, "RevocationWarning" },
	{ (long)RevocationNotification, "RevocationNotification" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_policynet__PKIStatus2s(struct soap *soap, enum policynet__PKIStatus n)
{	const char *s = soap_code_str(soap_codes_policynet__PKIStatus, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__PKIStatus(struct soap *soap, const char *tag, int id, const enum policynet__PKIStatus *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__PKIStatus), type);
	soap_send(soap, soap_policynet__PKIStatus2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum policynet__PKIStatus * SOAP_FMAC4 soap_get_policynet__PKIStatus(struct soap *soap, enum policynet__PKIStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__PKIStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2policynet__PKIStatus(struct soap *soap, const char *s, enum policynet__PKIStatus *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_policynet__PKIStatus, s);
	if (map)
		*a = (enum policynet__PKIStatus)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 5)))
			return soap->error = SOAP_TYPE;
		*a = (enum policynet__PKIStatus)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum policynet__PKIStatus * SOAP_FMAC4 soap_in_policynet__PKIStatus(struct soap *soap, const char *tag, enum policynet__PKIStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum policynet__PKIStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__PKIStatus, sizeof(enum policynet__PKIStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2policynet__PKIStatus(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum policynet__PKIStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__PKIStatus, 0, sizeof(enum policynet__PKIStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void policynet__CertificateRevocationListResponse::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateRevocationListResponse::Status.policynet__PKIStatusInfo::soap_default(soap);
	soap_default_string(soap, &this->policynet__CertificateRevocationListResponse::CRL);
}

void policynet__CertificateRevocationListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateRevocationListResponse::Status.soap_serialize(soap);
	soap_serialize_string(soap, &this->policynet__CertificateRevocationListResponse::CRL);
}

int policynet__CertificateRevocationListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertificateRevocationListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertificateRevocationListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateRevocationListResponse(struct soap *soap, const char *tag, int id, const policynet__CertificateRevocationListResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse), type);
	soap_element_result(soap, "policynet:Status");
	(a->policynet__CertificateRevocationListResponse::Status).soap_out(soap, "policynet:Status", -1, "");
	soap_out_string(soap, "policynet:CRL", -1, &(a->policynet__CertificateRevocationListResponse::CRL), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertificateRevocationListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertificateRevocationListResponse(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertificateRevocationListResponse * SOAP_FMAC4 soap_get_policynet__CertificateRevocationListResponse(struct soap *soap, policynet__CertificateRevocationListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateRevocationListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertificateRevocationListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertificateRevocationListResponse(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertificateRevocationListResponse * SOAP_FMAC4 soap_in_policynet__CertificateRevocationListResponse(struct soap *soap, const char *tag, policynet__CertificateRevocationListResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertificateRevocationListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse, sizeof(policynet__CertificateRevocationListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertificateRevocationListResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Status1 = 1, soap_flag_CRL1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->policynet__CertificateRevocationListResponse::Status).soap_in(soap, "policynet:Status", "policynet:PKIStatusInfo"))
				{	soap_flag_Status1--;
					continue;
				}
			if (soap_flag_CRL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "policynet:CRL", &(a->policynet__CertificateRevocationListResponse::CRL), "xsd:string"))
				{	soap_flag_CRL1--;
					continue;
				}
			soap_check_result(soap, "policynet:Status");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertificateRevocationListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse, 0, sizeof(policynet__CertificateRevocationListResponse), 0, soap_copy_policynet__CertificateRevocationListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertificateRevocationListResponse * SOAP_FMAC6 soap_new_policynet__CertificateRevocationListResponse(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateRevocationListResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateRevocationListResponse(struct soap *soap, policynet__CertificateRevocationListResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertificateRevocationListResponse * SOAP_FMAC4 soap_instantiate_policynet__CertificateRevocationListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateRevocationListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateRevocationListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertificateRevocationListResponse;
		if (size)
			*size = sizeof(policynet__CertificateRevocationListResponse);
	}
	else
	{	cp->ptr = (void*)new policynet__CertificateRevocationListResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertificateRevocationListResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertificateRevocationListResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateRevocationListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertificateRevocationListResponse %p -> %p\n", q, p));
	*(policynet__CertificateRevocationListResponse*)p = *(policynet__CertificateRevocationListResponse*)q;
}

void policynet__CertificateRevocationResponse::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateRevocationResponse::Status.policynet__PKIStatusInfo::soap_default(soap);
}

void policynet__CertificateRevocationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateRevocationResponse::Status.soap_serialize(soap);
}

int policynet__CertificateRevocationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertificateRevocationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertificateRevocationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateRevocationResponse(struct soap *soap, const char *tag, int id, const policynet__CertificateRevocationResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse), type);
	soap_element_result(soap, "policynet:Status");
	(a->policynet__CertificateRevocationResponse::Status).soap_out(soap, "policynet:Status", -1, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertificateRevocationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertificateRevocationResponse(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertificateRevocationResponse * SOAP_FMAC4 soap_get_policynet__CertificateRevocationResponse(struct soap *soap, policynet__CertificateRevocationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateRevocationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertificateRevocationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertificateRevocationResponse(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertificateRevocationResponse * SOAP_FMAC4 soap_in_policynet__CertificateRevocationResponse(struct soap *soap, const char *tag, policynet__CertificateRevocationResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertificateRevocationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse, sizeof(policynet__CertificateRevocationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertificateRevocationResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->policynet__CertificateRevocationResponse::Status).soap_in(soap, "policynet:Status", "policynet:PKIStatusInfo"))
				{	soap_flag_Status1--;
					continue;
				}
			soap_check_result(soap, "policynet:Status");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertificateRevocationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse, 0, sizeof(policynet__CertificateRevocationResponse), 0, soap_copy_policynet__CertificateRevocationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertificateRevocationResponse * SOAP_FMAC6 soap_new_policynet__CertificateRevocationResponse(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateRevocationResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateRevocationResponse(struct soap *soap, policynet__CertificateRevocationResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertificateRevocationResponse * SOAP_FMAC4 soap_instantiate_policynet__CertificateRevocationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateRevocationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateRevocationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertificateRevocationResponse;
		if (size)
			*size = sizeof(policynet__CertificateRevocationResponse);
	}
	else
	{	cp->ptr = (void*)new policynet__CertificateRevocationResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertificateRevocationResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertificateRevocationResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateRevocationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertificateRevocationResponse %p -> %p\n", q, p));
	*(policynet__CertificateRevocationResponse*)p = *(policynet__CertificateRevocationResponse*)q;
}

void policynet__CertificateRevocation::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateRevocation::CertId.policynet__CertId::soap_default(soap);
	soap_default_policynet__CRLReason(soap, &this->policynet__CertificateRevocation::Reason);
	soap_default_xsd__dateTime(soap, &this->policynet__CertificateRevocation::InvalidityDate);
}

void policynet__CertificateRevocation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateRevocation::CertId.soap_serialize(soap);
	soap_embedded(soap, &this->policynet__CertificateRevocation::InvalidityDate, SOAP_TYPE_policynetca_xsd__dateTime);
	soap_serialize_xsd__dateTime(soap, &this->policynet__CertificateRevocation::InvalidityDate);
}

int policynet__CertificateRevocation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateRevocation);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertificateRevocation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertificateRevocation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateRevocation(struct soap *soap, const char *tag, int id, const policynet__CertificateRevocation *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocation), type);
	(a->policynet__CertificateRevocation::CertId).soap_out(soap, "policynet:CertId", -1, "");
	soap_out_policynet__CRLReason(soap, "policynet:Reason", -1, &(a->policynet__CertificateRevocation::Reason), "");
	soap_out_xsd__dateTime(soap, "policynet:InvalidityDate", -1, &(a->policynet__CertificateRevocation::InvalidityDate), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertificateRevocation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertificateRevocation(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertificateRevocation * SOAP_FMAC4 soap_get_policynet__CertificateRevocation(struct soap *soap, policynet__CertificateRevocation *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateRevocation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertificateRevocation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertificateRevocation(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertificateRevocation * SOAP_FMAC4 soap_in_policynet__CertificateRevocation(struct soap *soap, const char *tag, policynet__CertificateRevocation *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertificateRevocation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocation, sizeof(policynet__CertificateRevocation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertificateRevocation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertificateRevocation *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_CertId1 = 1, soap_flag_Reason1 = 1, soap_flag_InvalidityDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CertId1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->policynet__CertificateRevocation::CertId).soap_in(soap, "policynet:CertId", "policynet:CertId"))
				{	soap_flag_CertId1--;
					continue;
				}
			if (soap_flag_Reason1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_policynet__CRLReason(soap, "policynet:Reason", &(a->policynet__CertificateRevocation::Reason), "policynet:CRLReason"))
				{	soap_flag_Reason1--;
					continue;
				}
			if (soap_flag_InvalidityDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__dateTime(soap, "policynet:InvalidityDate", &(a->policynet__CertificateRevocation::InvalidityDate), "xsd:dateTime"))
				{	soap_flag_InvalidityDate1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertificateRevocation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateRevocation, 0, sizeof(policynet__CertificateRevocation), 0, soap_copy_policynet__CertificateRevocation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CertId1 > 0 || soap_flag_Reason1 > 0 || soap_flag_InvalidityDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertificateRevocation * SOAP_FMAC6 soap_new_policynet__CertificateRevocation(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateRevocation(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateRevocation(struct soap *soap, policynet__CertificateRevocation *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertificateRevocation * SOAP_FMAC4 soap_instantiate_policynet__CertificateRevocation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateRevocation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateRevocation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertificateRevocation;
		if (size)
			*size = sizeof(policynet__CertificateRevocation);
	}
	else
	{	cp->ptr = (void*)new policynet__CertificateRevocation[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertificateRevocation);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertificateRevocation*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateRevocation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertificateRevocation %p -> %p\n", q, p));
	*(policynet__CertificateRevocation*)p = *(policynet__CertificateRevocation*)q;
}

void policynet__CertificateConfirmResponse::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateConfirmResponse::Status.policynet__PKIStatusInfo::soap_default(soap);
}

void policynet__CertificateConfirmResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateConfirmResponse::Status.soap_serialize(soap);
}

int policynet__CertificateConfirmResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertificateConfirmResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertificateConfirmResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateConfirmResponse(struct soap *soap, const char *tag, int id, const policynet__CertificateConfirmResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse), type);
	soap_element_result(soap, "policynet:Status");
	(a->policynet__CertificateConfirmResponse::Status).soap_out(soap, "policynet:Status", -1, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertificateConfirmResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertificateConfirmResponse(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertificateConfirmResponse * SOAP_FMAC4 soap_get_policynet__CertificateConfirmResponse(struct soap *soap, policynet__CertificateConfirmResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateConfirmResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertificateConfirmResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertificateConfirmResponse(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertificateConfirmResponse * SOAP_FMAC4 soap_in_policynet__CertificateConfirmResponse(struct soap *soap, const char *tag, policynet__CertificateConfirmResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertificateConfirmResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse, sizeof(policynet__CertificateConfirmResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertificateConfirmResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->policynet__CertificateConfirmResponse::Status).soap_in(soap, "policynet:Status", "policynet:PKIStatusInfo"))
				{	soap_flag_Status1--;
					continue;
				}
			soap_check_result(soap, "policynet:Status");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertificateConfirmResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse, 0, sizeof(policynet__CertificateConfirmResponse), 0, soap_copy_policynet__CertificateConfirmResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertificateConfirmResponse * SOAP_FMAC6 soap_new_policynet__CertificateConfirmResponse(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateConfirmResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateConfirmResponse(struct soap *soap, policynet__CertificateConfirmResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertificateConfirmResponse * SOAP_FMAC4 soap_instantiate_policynet__CertificateConfirmResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateConfirmResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateConfirmResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertificateConfirmResponse;
		if (size)
			*size = sizeof(policynet__CertificateConfirmResponse);
	}
	else
	{	cp->ptr = (void*)new policynet__CertificateConfirmResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertificateConfirmResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertificateConfirmResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateConfirmResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertificateConfirmResponse %p -> %p\n", q, p));
	*(policynet__CertificateConfirmResponse*)p = *(policynet__CertificateConfirmResponse*)q;
}

void policynet__CertificateConfirm::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateConfirm::CertificateId.policynet__CertId::soap_default(soap);
	soap_default_policynet__BinaryData(soap, &this->policynet__CertificateConfirm::CertificateHash);
}

void policynet__CertificateConfirm::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateConfirm::CertificateId.soap_serialize(soap);
	soap_serialize_policynet__BinaryData(soap, &this->policynet__CertificateConfirm::CertificateHash);
}

int policynet__CertificateConfirm::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateConfirm);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertificateConfirm::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertificateConfirm(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateConfirm(struct soap *soap, const char *tag, int id, const policynet__CertificateConfirm *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateConfirm), type);
	(a->policynet__CertificateConfirm::CertificateId).soap_out(soap, "policynet:CertificateId", -1, "");
	soap_out_policynet__BinaryData(soap, "policynet:CertificateHash", -1, &(a->policynet__CertificateConfirm::CertificateHash), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertificateConfirm::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertificateConfirm(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertificateConfirm * SOAP_FMAC4 soap_get_policynet__CertificateConfirm(struct soap *soap, policynet__CertificateConfirm *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateConfirm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertificateConfirm::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertificateConfirm(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertificateConfirm * SOAP_FMAC4 soap_in_policynet__CertificateConfirm(struct soap *soap, const char *tag, policynet__CertificateConfirm *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertificateConfirm *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateConfirm, sizeof(policynet__CertificateConfirm), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertificateConfirm)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertificateConfirm *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_CertificateId1 = 1, soap_flag_CertificateHash1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CertificateId1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->policynet__CertificateConfirm::CertificateId).soap_in(soap, "policynet:CertificateId", "policynet:CertId"))
				{	soap_flag_CertificateId1--;
					continue;
				}
			if (soap_flag_CertificateHash1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_policynet__BinaryData(soap, "policynet:CertificateHash", &(a->policynet__CertificateConfirm::CertificateHash), "policynet:BinaryData"))
				{	soap_flag_CertificateHash1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertificateConfirm *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateConfirm, 0, sizeof(policynet__CertificateConfirm), 0, soap_copy_policynet__CertificateConfirm);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CertificateId1 > 0 || soap_flag_CertificateHash1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertificateConfirm * SOAP_FMAC6 soap_new_policynet__CertificateConfirm(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateConfirm(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateConfirm(struct soap *soap, policynet__CertificateConfirm *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertificateConfirm * SOAP_FMAC4 soap_instantiate_policynet__CertificateConfirm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateConfirm(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateConfirm, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertificateConfirm;
		if (size)
			*size = sizeof(policynet__CertificateConfirm);
	}
	else
	{	cp->ptr = (void*)new policynet__CertificateConfirm[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertificateConfirm);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertificateConfirm*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateConfirm(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertificateConfirm %p -> %p\n", q, p));
	*(policynet__CertificateConfirm*)p = *(policynet__CertificateConfirm*)q;
}

void policynet__CertificateSigningResponse::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateSigningResponse::Status.policynet__PKIStatusInfo::soap_default(soap);
	this->policynet__CertificateSigningResponse::ConfirmWaitTime = NULL;
	this->policynet__CertificateSigningResponse::POP = NULL;
}

void policynet__CertificateSigningResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->policynet__CertificateSigningResponse::Status.soap_serialize(soap);
	soap_serialize_PointerToxsd__dateTime(soap, &this->policynet__CertificateSigningResponse::ConfirmWaitTime);
	soap_serialize_PointerTopolicynet__PKCSDigitalEvenlope(soap, &this->policynet__CertificateSigningResponse::POP);
}

int policynet__CertificateSigningResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateSigningResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertificateSigningResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertificateSigningResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateSigningResponse(struct soap *soap, const char *tag, int id, const policynet__CertificateSigningResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateSigningResponse), type);
	soap_element_result(soap, "policynet:Status");
	(a->policynet__CertificateSigningResponse::Status).soap_out(soap, "policynet:Status", -1, "");
	soap_out_PointerToxsd__dateTime(soap, "policynet:ConfirmWaitTime", -1, &(a->policynet__CertificateSigningResponse::ConfirmWaitTime), "");
	soap_out_PointerTopolicynet__PKCSDigitalEvenlope(soap, "policynet:POP", -1, &(a->policynet__CertificateSigningResponse::POP), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertificateSigningResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertificateSigningResponse(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertificateSigningResponse * SOAP_FMAC4 soap_get_policynet__CertificateSigningResponse(struct soap *soap, policynet__CertificateSigningResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateSigningResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertificateSigningResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertificateSigningResponse(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertificateSigningResponse * SOAP_FMAC4 soap_in_policynet__CertificateSigningResponse(struct soap *soap, const char *tag, policynet__CertificateSigningResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertificateSigningResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateSigningResponse, sizeof(policynet__CertificateSigningResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertificateSigningResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertificateSigningResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Status1 = 1, soap_flag_ConfirmWaitTime1 = 1, soap_flag_POP1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->policynet__CertificateSigningResponse::Status).soap_in(soap, "policynet:Status", "policynet:PKIStatusInfo"))
				{	soap_flag_Status1--;
					continue;
				}
			if (soap_flag_ConfirmWaitTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerToxsd__dateTime(soap, "policynet:ConfirmWaitTime", &(a->policynet__CertificateSigningResponse::ConfirmWaitTime), "xsd:dateTime"))
				{	soap_flag_ConfirmWaitTime1--;
					continue;
				}
			if (soap_flag_POP1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTopolicynet__PKCSDigitalEvenlope(soap, "policynet:POP", &(a->policynet__CertificateSigningResponse::POP), "policynet:PKCSDigitalEvenlope"))
				{	soap_flag_POP1--;
					continue;
				}
			soap_check_result(soap, "policynet:Status");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertificateSigningResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateSigningResponse, 0, sizeof(policynet__CertificateSigningResponse), 0, soap_copy_policynet__CertificateSigningResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertificateSigningResponse * SOAP_FMAC6 soap_new_policynet__CertificateSigningResponse(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateSigningResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateSigningResponse(struct soap *soap, policynet__CertificateSigningResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertificateSigningResponse * SOAP_FMAC4 soap_instantiate_policynet__CertificateSigningResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateSigningResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateSigningResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertificateSigningResponse;
		if (size)
			*size = sizeof(policynet__CertificateSigningResponse);
	}
	else
	{	cp->ptr = (void*)new policynet__CertificateSigningResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertificateSigningResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertificateSigningResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateSigningResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertificateSigningResponse %p -> %p\n", q, p));
	*(policynet__CertificateSigningResponse*)p = *(policynet__CertificateSigningResponse*)q;
}

void policynet__CertificateSigning::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_policynet__EndEntityType(soap, &this->policynet__CertificateSigning::EndEntity);
	soap_default_policynet__PKCS10(soap, &this->policynet__CertificateSigning::CSR);
}

void policynet__CertificateSigning::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_policynet__EndEntityType(soap, &this->policynet__CertificateSigning::EndEntity);
	soap_serialize_policynet__PKCS10(soap, &this->policynet__CertificateSigning::CSR);
}

int policynet__CertificateSigning::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateSigning);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertificateSigning::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertificateSigning(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateSigning(struct soap *soap, const char *tag, int id, const policynet__CertificateSigning *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateSigning), type);
	soap_out_policynet__EndEntityType(soap, "policynet:EndEntity", -1, &(a->policynet__CertificateSigning::EndEntity), "");
	soap_out_policynet__PKCS10(soap, "policynet:CSR", -1, &(a->policynet__CertificateSigning::CSR), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertificateSigning::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertificateSigning(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertificateSigning * SOAP_FMAC4 soap_get_policynet__CertificateSigning(struct soap *soap, policynet__CertificateSigning *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateSigning(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertificateSigning::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertificateSigning(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertificateSigning * SOAP_FMAC4 soap_in_policynet__CertificateSigning(struct soap *soap, const char *tag, policynet__CertificateSigning *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertificateSigning *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateSigning, sizeof(policynet__CertificateSigning), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertificateSigning)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertificateSigning *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_EndEntity1 = 1, soap_flag_CSR1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EndEntity1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_policynet__EndEntityType(soap, "policynet:EndEntity", &(a->policynet__CertificateSigning::EndEntity), "policynet:EndEntityType"))
				{	soap_flag_EndEntity1--;
					continue;
				}
			if (soap_flag_CSR1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_policynet__PKCS10(soap, "policynet:CSR", &(a->policynet__CertificateSigning::CSR), "policynet:PKCS10"))
				{	soap_flag_CSR1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertificateSigning *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateSigning, 0, sizeof(policynet__CertificateSigning), 0, soap_copy_policynet__CertificateSigning);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_EndEntity1 > 0 || soap_flag_CSR1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertificateSigning * SOAP_FMAC6 soap_new_policynet__CertificateSigning(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateSigning(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateSigning(struct soap *soap, policynet__CertificateSigning *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertificateSigning * SOAP_FMAC4 soap_instantiate_policynet__CertificateSigning(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateSigning(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateSigning, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertificateSigning;
		if (size)
			*size = sizeof(policynet__CertificateSigning);
	}
	else
	{	cp->ptr = (void*)new policynet__CertificateSigning[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertificateSigning);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertificateSigning*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateSigning(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertificateSigning %p -> %p\n", q, p));
	*(policynet__CertificateSigning*)p = *(policynet__CertificateSigning*)q;
}

void policynet__PKCSDigitalEvenlope::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_Array16OfunsignedByte(soap, this->policynet__PKCSDigitalEvenlope::IV);
	soap_default_policynet__BinaryData(soap, &this->policynet__PKCSDigitalEvenlope::EncryptedSecretKey);
	soap_default_policynet__BinaryData(soap, &this->policynet__PKCSDigitalEvenlope::EncryptedData);
}

void policynet__PKCSDigitalEvenlope::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_Array16OfunsignedByte(soap, this->policynet__PKCSDigitalEvenlope::IV);
	soap_serialize_policynet__BinaryData(soap, &this->policynet__PKCSDigitalEvenlope::EncryptedSecretKey);
	soap_serialize_policynet__BinaryData(soap, &this->policynet__PKCSDigitalEvenlope::EncryptedData);
}

int policynet__PKCSDigitalEvenlope::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__PKCSDigitalEvenlope::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__PKCSDigitalEvenlope(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__PKCSDigitalEvenlope(struct soap *soap, const char *tag, int id, const policynet__PKCSDigitalEvenlope *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope), type);
	soap_out_Array16OfunsignedByte(soap, "policynet:IV", -1, a->policynet__PKCSDigitalEvenlope::IV, "");
	soap_out_policynet__BinaryData(soap, "policynet:EncryptedSecretKey", -1, &(a->policynet__PKCSDigitalEvenlope::EncryptedSecretKey), "");
	soap_out_policynet__BinaryData(soap, "policynet:EncryptedData", -1, &(a->policynet__PKCSDigitalEvenlope::EncryptedData), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__PKCSDigitalEvenlope::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__PKCSDigitalEvenlope(soap, this, tag, type);
}

SOAP_FMAC3 policynet__PKCSDigitalEvenlope * SOAP_FMAC4 soap_get_policynet__PKCSDigitalEvenlope(struct soap *soap, policynet__PKCSDigitalEvenlope *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__PKCSDigitalEvenlope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__PKCSDigitalEvenlope::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__PKCSDigitalEvenlope(soap, tag, this, type);
}

SOAP_FMAC3 policynet__PKCSDigitalEvenlope * SOAP_FMAC4 soap_in_policynet__PKCSDigitalEvenlope(struct soap *soap, const char *tag, policynet__PKCSDigitalEvenlope *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__PKCSDigitalEvenlope *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope, sizeof(policynet__PKCSDigitalEvenlope), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__PKCSDigitalEvenlope *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_IV1 = 1, soap_flag_EncryptedSecretKey1 = 1, soap_flag_EncryptedData1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IV1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Array16OfunsignedByte(soap, "policynet:IV", a->policynet__PKCSDigitalEvenlope::IV, "xsd:unsignedByte"))
				{	soap_flag_IV1--;
					continue;
				}
			if (soap_flag_EncryptedSecretKey1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_policynet__BinaryData(soap, "policynet:EncryptedSecretKey", &(a->policynet__PKCSDigitalEvenlope::EncryptedSecretKey), "policynet:BinaryData"))
				{	soap_flag_EncryptedSecretKey1--;
					continue;
				}
			if (soap_flag_EncryptedData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_policynet__BinaryData(soap, "policynet:EncryptedData", &(a->policynet__PKCSDigitalEvenlope::EncryptedData), "policynet:BinaryData"))
				{	soap_flag_EncryptedData1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__PKCSDigitalEvenlope *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope, 0, sizeof(policynet__PKCSDigitalEvenlope), 0, soap_copy_policynet__PKCSDigitalEvenlope);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_IV1 > 0 || soap_flag_EncryptedSecretKey1 > 0 || soap_flag_EncryptedData1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__PKCSDigitalEvenlope * SOAP_FMAC6 soap_new_policynet__PKCSDigitalEvenlope(struct soap *soap, int n)
{	return soap_instantiate_policynet__PKCSDigitalEvenlope(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__PKCSDigitalEvenlope(struct soap *soap, policynet__PKCSDigitalEvenlope *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__PKCSDigitalEvenlope * SOAP_FMAC4 soap_instantiate_policynet__PKCSDigitalEvenlope(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__PKCSDigitalEvenlope(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__PKCSDigitalEvenlope;
		if (size)
			*size = sizeof(policynet__PKCSDigitalEvenlope);
	}
	else
	{	cp->ptr = (void*)new policynet__PKCSDigitalEvenlope[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__PKCSDigitalEvenlope);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__PKCSDigitalEvenlope*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__PKCSDigitalEvenlope(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__PKCSDigitalEvenlope %p -> %p\n", q, p));
	*(policynet__PKCSDigitalEvenlope*)p = *(policynet__PKCSDigitalEvenlope*)q;
}

void policynet__PKCSCertificates::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfpolicynet__PKCS10(soap, &this->policynet__PKCSCertificates::Certificate);
}

void policynet__PKCSCertificates::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfpolicynet__PKCS10(soap, &this->policynet__PKCSCertificates::Certificate);
}

int policynet__PKCSCertificates::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__PKCSCertificates);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__PKCSCertificates::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__PKCSCertificates(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__PKCSCertificates(struct soap *soap, const char *tag, int id, const policynet__PKCSCertificates *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__PKCSCertificates), type);
	soap_out_std__vectorTemplateOfpolicynet__PKCS10(soap, "policynet:Certificate", -1, &(a->policynet__PKCSCertificates::Certificate), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__PKCSCertificates::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__PKCSCertificates(soap, this, tag, type);
}

SOAP_FMAC3 policynet__PKCSCertificates * SOAP_FMAC4 soap_get_policynet__PKCSCertificates(struct soap *soap, policynet__PKCSCertificates *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__PKCSCertificates(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__PKCSCertificates::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__PKCSCertificates(soap, tag, this, type);
}

SOAP_FMAC3 policynet__PKCSCertificates * SOAP_FMAC4 soap_in_policynet__PKCSCertificates(struct soap *soap, const char *tag, policynet__PKCSCertificates *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__PKCSCertificates *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__PKCSCertificates, sizeof(policynet__PKCSCertificates), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__PKCSCertificates)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__PKCSCertificates *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfpolicynet__PKCS10(soap, "policynet:Certificate", &(a->policynet__PKCSCertificates::Certificate), "policynet:PKCS10"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__PKCSCertificates *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__PKCSCertificates, 0, sizeof(policynet__PKCSCertificates), 0, soap_copy_policynet__PKCSCertificates);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__PKCSCertificates * SOAP_FMAC6 soap_new_policynet__PKCSCertificates(struct soap *soap, int n)
{	return soap_instantiate_policynet__PKCSCertificates(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__PKCSCertificates(struct soap *soap, policynet__PKCSCertificates *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__PKCSCertificates * SOAP_FMAC4 soap_instantiate_policynet__PKCSCertificates(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__PKCSCertificates(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__PKCSCertificates, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__PKCSCertificates;
		if (size)
			*size = sizeof(policynet__PKCSCertificates);
	}
	else
	{	cp->ptr = (void*)new policynet__PKCSCertificates[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__PKCSCertificates);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__PKCSCertificates*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__PKCSCertificates(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__PKCSCertificates %p -> %p\n", q, p));
	*(policynet__PKCSCertificates*)p = *(policynet__PKCSCertificates*)q;
}

void policynet__SGDevice::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->policynet__SGDevice::McUID);
}

void policynet__SGDevice::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->policynet__SGDevice::McUID);
}

int policynet__SGDevice::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__SGDevice);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__SGDevice::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__SGDevice(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__SGDevice(struct soap *soap, const char *tag, int id, const policynet__SGDevice *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__SGDevice), type);
	soap_out_xsd__string(soap, "policynet:McUID", -1, &(a->policynet__SGDevice::McUID), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__SGDevice::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__SGDevice(soap, this, tag, type);
}

SOAP_FMAC3 policynet__SGDevice * SOAP_FMAC4 soap_get_policynet__SGDevice(struct soap *soap, policynet__SGDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__SGDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__SGDevice::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__SGDevice(soap, tag, this, type);
}

SOAP_FMAC3 policynet__SGDevice * SOAP_FMAC4 soap_in_policynet__SGDevice(struct soap *soap, const char *tag, policynet__SGDevice *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__SGDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__SGDevice, sizeof(policynet__SGDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__SGDevice)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__SGDevice *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_McUID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_McUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "policynet:McUID", &(a->policynet__SGDevice::McUID), "xsd:string"))
				{	soap_flag_McUID1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__SGDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__SGDevice, 0, sizeof(policynet__SGDevice), 0, soap_copy_policynet__SGDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_McUID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__SGDevice * SOAP_FMAC6 soap_new_policynet__SGDevice(struct soap *soap, int n)
{	return soap_instantiate_policynet__SGDevice(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__SGDevice(struct soap *soap, policynet__SGDevice *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__SGDevice * SOAP_FMAC4 soap_instantiate_policynet__SGDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__SGDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__SGDevice, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__SGDevice;
		if (size)
			*size = sizeof(policynet__SGDevice);
	}
	else
	{	cp->ptr = (void*)new policynet__SGDevice[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__SGDevice);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__SGDevice*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__SGDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__SGDevice %p -> %p\n", q, p));
	*(policynet__SGDevice*)p = *(policynet__SGDevice*)q;
}

void policynet__CertId::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->policynet__CertId::Issuer);
	soap_default_xsd__string(soap, &this->policynet__CertId::SerialNumber);
}

void policynet__CertId::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &this->policynet__CertId::Issuer);
	soap_serialize_xsd__string(soap, &this->policynet__CertId::SerialNumber);
}

int policynet__CertId::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertId);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__CertId::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__CertId(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertId(struct soap *soap, const char *tag, int id, const policynet__CertId *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertId), type);
	soap_out_xsd__string(soap, "policynet:Issuer", -1, &(a->policynet__CertId::Issuer), "");
	soap_out_xsd__string(soap, "policynet:SerialNumber", -1, &(a->policynet__CertId::SerialNumber), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__CertId::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__CertId(soap, this, tag, type);
}

SOAP_FMAC3 policynet__CertId * SOAP_FMAC4 soap_get_policynet__CertId(struct soap *soap, policynet__CertId *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__CertId::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__CertId(soap, tag, this, type);
}

SOAP_FMAC3 policynet__CertId * SOAP_FMAC4 soap_in_policynet__CertId(struct soap *soap, const char *tag, policynet__CertId *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__CertId *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertId, sizeof(policynet__CertId), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__CertId)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__CertId *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Issuer1 = 1, soap_flag_SerialNumber1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Issuer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "policynet:Issuer", &(a->policynet__CertId::Issuer), "xsd:string"))
				{	soap_flag_Issuer1--;
					continue;
				}
			if (soap_flag_SerialNumber1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "policynet:SerialNumber", &(a->policynet__CertId::SerialNumber), "xsd:string"))
				{	soap_flag_SerialNumber1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__CertId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertId, 0, sizeof(policynet__CertId), 0, soap_copy_policynet__CertId);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Issuer1 > 0 || soap_flag_SerialNumber1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__CertId * SOAP_FMAC6 soap_new_policynet__CertId(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertId(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertId(struct soap *soap, policynet__CertId *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__CertId * SOAP_FMAC4 soap_instantiate_policynet__CertId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertId, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__CertId;
		if (size)
			*size = sizeof(policynet__CertId);
	}
	else
	{	cp->ptr = (void*)new policynet__CertId[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__CertId);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__CertId*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__CertId %p -> %p\n", q, p));
	*(policynet__CertId*)p = *(policynet__CertId*)q;
}

void policynet__PKIStatusInfo::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_policynet__PKIStatus(soap, &this->policynet__PKIStatusInfo::Status);
	this->policynet__PKIStatusInfo::FailureInfo = NULL;
}

void policynet__PKIStatusInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTopolicynet__PKIFailureInfo(soap, &this->policynet__PKIStatusInfo::FailureInfo);
}

int policynet__PKIStatusInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__PKIStatusInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int policynet__PKIStatusInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_policynet__PKIStatusInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__PKIStatusInfo(struct soap *soap, const char *tag, int id, const policynet__PKIStatusInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__PKIStatusInfo), type);
	soap_out_policynet__PKIStatus(soap, "policynet:Status", -1, &(a->policynet__PKIStatusInfo::Status), "");
	soap_out_PointerTopolicynet__PKIFailureInfo(soap, "policynet:FailureInfo", -1, &(a->policynet__PKIStatusInfo::FailureInfo), "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *policynet__PKIStatusInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_policynet__PKIStatusInfo(soap, this, tag, type);
}

SOAP_FMAC3 policynet__PKIStatusInfo * SOAP_FMAC4 soap_get_policynet__PKIStatusInfo(struct soap *soap, policynet__PKIStatusInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__PKIStatusInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *policynet__PKIStatusInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_policynet__PKIStatusInfo(soap, tag, this, type);
}

SOAP_FMAC3 policynet__PKIStatusInfo * SOAP_FMAC4 soap_in_policynet__PKIStatusInfo(struct soap *soap, const char *tag, policynet__PKIStatusInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (policynet__PKIStatusInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__PKIStatusInfo, sizeof(policynet__PKIStatusInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_policynetca_policynet__PKIStatusInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (policynet__PKIStatusInfo *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Status1 = 1, soap_flag_FailureInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_policynet__PKIStatus(soap, "policynet:Status", &(a->policynet__PKIStatusInfo::Status), "policynet:PKIStatus"))
				{	soap_flag_Status1--;
					continue;
				}
			if (soap_flag_FailureInfo1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTopolicynet__PKIFailureInfo(soap, "policynet:FailureInfo", &(a->policynet__PKIStatusInfo::FailureInfo), "policynet:PKIFailureInfo"))
				{	soap_flag_FailureInfo1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (policynet__PKIStatusInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__PKIStatusInfo, 0, sizeof(policynet__PKIStatusInfo), 0, soap_copy_policynet__PKIStatusInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 policynet__PKIStatusInfo * SOAP_FMAC6 soap_new_policynet__PKIStatusInfo(struct soap *soap, int n)
{	return soap_instantiate_policynet__PKIStatusInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__PKIStatusInfo(struct soap *soap, policynet__PKIStatusInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 policynet__PKIStatusInfo * SOAP_FMAC4 soap_instantiate_policynet__PKIStatusInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__PKIStatusInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__PKIStatusInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new policynet__PKIStatusInfo;
		if (size)
			*size = sizeof(policynet__PKIStatusInfo);
	}
	else
	{	cp->ptr = (void*)new policynet__PKIStatusInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(policynet__PKIStatusInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (policynet__PKIStatusInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__PKIStatusInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying policynet__PKIStatusInfo %p -> %p\n", q, p));
	*(policynet__PKIStatusInfo*)p = *(policynet__PKIStatusInfo*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->__size = 0;
	this->__ptr = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr)
		soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_policynetca_xsd__base64Binary);
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_policynetca_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_policynetca_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	soap_element_begin_out(soap, tag, id, type);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__dateTime(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__dateTime(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_xsd__dateTime);
	if (soap_out_xsd__dateTime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_policynetca_xsd__dateTime), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__dateTime(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_xsd__dateTime, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_xsd__dateTime, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_policynetca_xsd__dateTime, 0, sizeof(std::string), 0, soap_copy_xsd__dateTime);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	if ( soap->mode & SOAP_XML_STRICT )
#ifdef WITH_REGEX
	{
		if (regex_match(s->c_str(), "^[12][0-9]{3}-(0[1-9]|1[0-2])-([0-2][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([+-](0[0-9]|1[0-4]):[0-5][0-9]|Z)?$"))
			return s;
		else
		{
			soap->error = SOAP_TYPE;
			return NULL;
		}
	}
#endif
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_xsd__dateTime(struct soap *soap, int n)
{	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__dateTime(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_xsd__dateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__LoginPassword(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__LoginPassword(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__LoginPassword(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__LoginPassword);
	if (soap_out_policynet__LoginPassword(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__LoginPassword(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_policynetca_policynet__LoginPassword), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_policynet__LoginPassword(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__LoginPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_policynet__LoginPassword(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_policynet__LoginPassword, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_policynet__LoginPassword, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_policynetca_policynet__LoginPassword, 0, sizeof(std::string), 0, soap_copy_policynet__LoginPassword);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	if ( soap->mode & SOAP_XML_STRICT )
#ifdef WITH_REGEX
	{
		if (regex_match(s->c_str(), "^[^ ]{8,18}$"))
			return s;
		else
		{
			soap->error = SOAP_TYPE;
			return NULL;
		}
	}
#endif
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_policynet__LoginPassword(struct soap *soap, int n)
{	return soap_instantiate_policynet__LoginPassword(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__LoginPassword(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_policynet__LoginPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__LoginPassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__LoginPassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__LoginPassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__UserName(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__UserName(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__UserName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__UserName);
	if (soap_out_policynet__UserName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__UserName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_policynetca_policynet__UserName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_policynet__UserName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__UserName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_policynet__UserName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_policynet__UserName, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_policynet__UserName, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_policynetca_policynet__UserName, 0, sizeof(std::string), 0, soap_copy_policynet__UserName);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	if ( soap->mode & SOAP_XML_STRICT )
#ifdef WITH_REGEX
	{
		if (regex_match(s->c_str(), "^[a-zA-Z0-9_]{3,10}$"))
			return s;
		else
		{
			soap->error = SOAP_TYPE;
			return NULL;
		}
	}
#endif
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_policynet__UserName(struct soap *soap, int n)
{	return soap_instantiate_policynet__UserName(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__UserName(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_policynet__UserName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__UserName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__UserName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__UserName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__PKCS10(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__PKCS10(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__PKCS10(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__PKCS10);
	if (soap_out_policynet__PKCS10(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__PKCS10(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_policynetca_policynet__PKCS10), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_policynet__PKCS10(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__PKCS10(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_policynet__PKCS10(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_policynet__PKCS10, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_policynet__PKCS10, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_policynetca_policynet__PKCS10, 0, sizeof(std::string), 0, soap_copy_policynet__PKCS10);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_policynet__PKCS10(struct soap *soap, int n)
{	return soap_instantiate_policynet__PKCS10(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__PKCS10(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_policynet__PKCS10(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__PKCS10(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__PKCS10, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__PKCS10(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, std::string *a)
{	soap_default_std__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, std::string const*a)
{	soap_serialize_std__string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_xsd__string);
	if (soap_out_xsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_policynetca_xsd__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_xsd__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_xsd__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_policynetca_xsd__string, 0, sizeof(std::string), 0, soap_copy_xsd__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_xsd__string(struct soap *soap, int n)
{	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_policynetca_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_policynetca_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_policynetca_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any, NULL);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__CertificateRevocationListRequest(struct soap *soap, struct policynet__CertificateRevocationListRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_1 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__CertificateRevocationListRequest(struct soap *soap, const struct policynet__CertificateRevocationListRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_1 skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__CertificateRevocationListRequest(struct soap *soap, const struct policynet__CertificateRevocationListRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest);
	if (soap_out_policynet__CertificateRevocationListRequest(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateRevocationListRequest(struct soap *soap, const char *tag, int id, const struct policynet__CertificateRevocationListRequest *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest), type);
	/* transient _param_1 skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct policynet__CertificateRevocationListRequest * SOAP_FMAC4 soap_get_policynet__CertificateRevocationListRequest(struct soap *soap, struct policynet__CertificateRevocationListRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateRevocationListRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct policynet__CertificateRevocationListRequest * SOAP_FMAC4 soap_in_policynet__CertificateRevocationListRequest(struct soap *soap, const char *tag, struct policynet__CertificateRevocationListRequest *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct policynet__CertificateRevocationListRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest, sizeof(struct policynet__CertificateRevocationListRequest), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_policynet__CertificateRevocationListRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_1 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct policynet__CertificateRevocationListRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest, 0, sizeof(struct policynet__CertificateRevocationListRequest), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct policynet__CertificateRevocationListRequest * SOAP_FMAC6 soap_new_policynet__CertificateRevocationListRequest(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateRevocationListRequest(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateRevocationListRequest(struct soap *soap, struct policynet__CertificateRevocationListRequest *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct policynet__CertificateRevocationListRequest * SOAP_FMAC4 soap_instantiate_policynet__CertificateRevocationListRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateRevocationListRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateRevocationListRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct policynet__CertificateRevocationListRequest;
		if (size)
			*size = sizeof(struct policynet__CertificateRevocationListRequest);
	}
	else
	{	cp->ptr = (void*)new struct policynet__CertificateRevocationListRequest[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct policynet__CertificateRevocationListRequest);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct policynet__CertificateRevocationListRequest*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateRevocationListRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct policynet__CertificateRevocationListRequest %p -> %p\n", q, p));
	*(struct policynet__CertificateRevocationListRequest*)p = *(struct policynet__CertificateRevocationListRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__CertificateRevocationRequest(struct soap *soap, struct policynet__CertificateRevocationRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_policynet__PKCS10(soap, &a->SenderCertificate);
	a->CertRev.policynet__CertificateRevocation::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__CertificateRevocationRequest(struct soap *soap, const struct policynet__CertificateRevocationRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_policynet__PKCS10(soap, &a->SenderCertificate);
	a->CertRev.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__CertificateRevocationRequest(struct soap *soap, const struct policynet__CertificateRevocationRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest);
	if (soap_out_policynet__CertificateRevocationRequest(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateRevocationRequest(struct soap *soap, const char *tag, int id, const struct policynet__CertificateRevocationRequest *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest), type);
	soap_out_policynet__PKCS10(soap, "policynet:SenderCertificate", -1, &a->SenderCertificate, "");
	a->CertRev.soap_out(soap, "policynet:CertRev", -1, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct policynet__CertificateRevocationRequest * SOAP_FMAC4 soap_get_policynet__CertificateRevocationRequest(struct soap *soap, struct policynet__CertificateRevocationRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateRevocationRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct policynet__CertificateRevocationRequest * SOAP_FMAC4 soap_in_policynet__CertificateRevocationRequest(struct soap *soap, const char *tag, struct policynet__CertificateRevocationRequest *a, const char *type)
{
	short soap_flag_SenderCertificate = 1, soap_flag_CertRev = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct policynet__CertificateRevocationRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest, sizeof(struct policynet__CertificateRevocationRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_policynet__CertificateRevocationRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SenderCertificate && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_policynet__PKCS10(soap, "policynet:SenderCertificate", &a->SenderCertificate, "policynet:PKCS10"))
				{	soap_flag_SenderCertificate--;
					continue;
				}
			if (soap_flag_CertRev && soap->error == SOAP_TAG_MISMATCH)
				if (a->CertRev.soap_in(soap, "policynet:CertRev", "policynet:CertificateRevocation"))
				{	soap_flag_CertRev--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct policynet__CertificateRevocationRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest, 0, sizeof(struct policynet__CertificateRevocationRequest), 0, soap_copy_policynet__CertificateRevocationRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SenderCertificate > 0 || soap_flag_CertRev > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct policynet__CertificateRevocationRequest * SOAP_FMAC6 soap_new_policynet__CertificateRevocationRequest(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateRevocationRequest(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateRevocationRequest(struct soap *soap, struct policynet__CertificateRevocationRequest *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct policynet__CertificateRevocationRequest * SOAP_FMAC4 soap_instantiate_policynet__CertificateRevocationRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateRevocationRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateRevocationRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct policynet__CertificateRevocationRequest;
		if (size)
			*size = sizeof(struct policynet__CertificateRevocationRequest);
	}
	else
	{	cp->ptr = (void*)new struct policynet__CertificateRevocationRequest[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct policynet__CertificateRevocationRequest);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct policynet__CertificateRevocationRequest*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateRevocationRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct policynet__CertificateRevocationRequest %p -> %p\n", q, p));
	*(struct policynet__CertificateRevocationRequest*)p = *(struct policynet__CertificateRevocationRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__CertificateConfirmRequest(struct soap *soap, struct policynet__CertificateConfirmRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Confirm.policynet__CertificateConfirm::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__CertificateConfirmRequest(struct soap *soap, const struct policynet__CertificateConfirmRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Confirm.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__CertificateConfirmRequest(struct soap *soap, const struct policynet__CertificateConfirmRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest);
	if (soap_out_policynet__CertificateConfirmRequest(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateConfirmRequest(struct soap *soap, const char *tag, int id, const struct policynet__CertificateConfirmRequest *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest), type);
	a->Confirm.soap_out(soap, "policynet:Confirm", -1, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct policynet__CertificateConfirmRequest * SOAP_FMAC4 soap_get_policynet__CertificateConfirmRequest(struct soap *soap, struct policynet__CertificateConfirmRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateConfirmRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct policynet__CertificateConfirmRequest * SOAP_FMAC4 soap_in_policynet__CertificateConfirmRequest(struct soap *soap, const char *tag, struct policynet__CertificateConfirmRequest *a, const char *type)
{
	short soap_flag_Confirm = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct policynet__CertificateConfirmRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest, sizeof(struct policynet__CertificateConfirmRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_policynet__CertificateConfirmRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Confirm && soap->error == SOAP_TAG_MISMATCH)
				if (a->Confirm.soap_in(soap, "policynet:Confirm", "policynet:CertificateConfirm"))
				{	soap_flag_Confirm--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct policynet__CertificateConfirmRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest, 0, sizeof(struct policynet__CertificateConfirmRequest), 0, soap_copy_policynet__CertificateConfirmRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Confirm > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct policynet__CertificateConfirmRequest * SOAP_FMAC6 soap_new_policynet__CertificateConfirmRequest(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateConfirmRequest(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateConfirmRequest(struct soap *soap, struct policynet__CertificateConfirmRequest *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct policynet__CertificateConfirmRequest * SOAP_FMAC4 soap_instantiate_policynet__CertificateConfirmRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateConfirmRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateConfirmRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct policynet__CertificateConfirmRequest;
		if (size)
			*size = sizeof(struct policynet__CertificateConfirmRequest);
	}
	else
	{	cp->ptr = (void*)new struct policynet__CertificateConfirmRequest[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct policynet__CertificateConfirmRequest);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct policynet__CertificateConfirmRequest*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateConfirmRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct policynet__CertificateConfirmRequest %p -> %p\n", q, p));
	*(struct policynet__CertificateConfirmRequest*)p = *(struct policynet__CertificateConfirmRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__CertificateSigningRequest(struct soap *soap, struct policynet__CertificateSigningRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Request.policynet__CertificateSigning::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__CertificateSigningRequest(struct soap *soap, const struct policynet__CertificateSigningRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Request.soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__CertificateSigningRequest(struct soap *soap, const struct policynet__CertificateSigningRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__CertificateSigningRequest);
	if (soap_out_policynet__CertificateSigningRequest(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__CertificateSigningRequest(struct soap *soap, const char *tag, int id, const struct policynet__CertificateSigningRequest *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__CertificateSigningRequest), type);
	a->Request.soap_out(soap, "policynet:Request", -1, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct policynet__CertificateSigningRequest * SOAP_FMAC4 soap_get_policynet__CertificateSigningRequest(struct soap *soap, struct policynet__CertificateSigningRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__CertificateSigningRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct policynet__CertificateSigningRequest * SOAP_FMAC4 soap_in_policynet__CertificateSigningRequest(struct soap *soap, const char *tag, struct policynet__CertificateSigningRequest *a, const char *type)
{
	short soap_flag_Request = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct policynet__CertificateSigningRequest *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__CertificateSigningRequest, sizeof(struct policynet__CertificateSigningRequest), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_policynet__CertificateSigningRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Request && soap->error == SOAP_TAG_MISMATCH)
				if (a->Request.soap_in(soap, "policynet:Request", "policynet:CertificateSigning"))
				{	soap_flag_Request--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct policynet__CertificateSigningRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__CertificateSigningRequest, 0, sizeof(struct policynet__CertificateSigningRequest), 0, soap_copy_policynet__CertificateSigningRequest);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Request > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct policynet__CertificateSigningRequest * SOAP_FMAC6 soap_new_policynet__CertificateSigningRequest(struct soap *soap, int n)
{	return soap_instantiate_policynet__CertificateSigningRequest(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__CertificateSigningRequest(struct soap *soap, struct policynet__CertificateSigningRequest *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct policynet__CertificateSigningRequest * SOAP_FMAC4 soap_instantiate_policynet__CertificateSigningRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__CertificateSigningRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__CertificateSigningRequest, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct policynet__CertificateSigningRequest;
		if (size)
			*size = sizeof(struct policynet__CertificateSigningRequest);
	}
	else
	{	cp->ptr = (void*)new struct policynet__CertificateSigningRequest[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct policynet__CertificateSigningRequest);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct policynet__CertificateSigningRequest*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__CertificateSigningRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct policynet__CertificateSigningRequest %p -> %p\n", q, p));
	*(struct policynet__CertificateSigningRequest*)p = *(struct policynet__CertificateSigningRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__EndEntityType(struct soap *soap, struct policynet__EndEntityType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__union = 0;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__EndEntityType(struct soap *soap, const struct policynet__EndEntityType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_policynet__EETypeUnion(soap, a->__union, &a->EEType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__EndEntityType(struct soap *soap, const struct policynet__EndEntityType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__EndEntityType);
	if (soap_out_policynet__EndEntityType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__EndEntityType(struct soap *soap, const char *tag, int id, const struct policynet__EndEntityType *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__EndEntityType), type);
	soap_out_policynet__EETypeUnion(soap, a->__union, &a->EEType);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct policynet__EndEntityType * SOAP_FMAC4 soap_get_policynet__EndEntityType(struct soap *soap, struct policynet__EndEntityType *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__EndEntityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct policynet__EndEntityType * SOAP_FMAC4 soap_in_policynet__EndEntityType(struct soap *soap, const char *tag, struct policynet__EndEntityType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct policynet__EndEntityType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__EndEntityType, sizeof(struct policynet__EndEntityType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_policynet__EndEntityType(soap, a);
	if (soap->body && !*soap->href)
	{
		if (!soap_in_policynet__EETypeUnion(soap, &a->__union, &a->EEType))
			return NULL;
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct policynet__EndEntityType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__EndEntityType, 0, sizeof(struct policynet__EndEntityType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct policynet__EndEntityType * SOAP_FMAC6 soap_new_policynet__EndEntityType(struct soap *soap, int n)
{	return soap_instantiate_policynet__EndEntityType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__EndEntityType(struct soap *soap, struct policynet__EndEntityType *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct policynet__EndEntityType * SOAP_FMAC4 soap_instantiate_policynet__EndEntityType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__EndEntityType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__EndEntityType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct policynet__EndEntityType;
		if (size)
			*size = sizeof(struct policynet__EndEntityType);
	}
	else
	{	cp->ptr = (void*)new struct policynet__EndEntityType[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct policynet__EndEntityType);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct policynet__EndEntityType*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__EndEntityType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct policynet__EndEntityType %p -> %p\n", q, p));
	*(struct policynet__EndEntityType*)p = *(struct policynet__EndEntityType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_policynet__BinaryData(struct soap *soap, struct policynet__BinaryData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__xop__Include(soap, &a->xop__Include);
	soap_default_string(soap, &a->xmime5__contentType);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__BinaryData(struct soap *soap, const struct policynet__BinaryData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__xop__Include(soap, &a->xop__Include);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_policynet__BinaryData(struct soap *soap, const struct policynet__BinaryData *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_policynet__BinaryData);
	if (soap_out_policynet__BinaryData(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__BinaryData(struct soap *soap, const char *tag, int id, const struct policynet__BinaryData *a, const char *type)
{
	if (a->xmime5__contentType)
		soap_set_attr(soap, "xmime5:contentType", a->xmime5__contentType);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_policynet__BinaryData), type);
	soap_out__xop__Include(soap, "xop:Include", -1, &a->xop__Include, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct policynet__BinaryData * SOAP_FMAC4 soap_get_policynet__BinaryData(struct soap *soap, struct policynet__BinaryData *p, const char *tag, const char *type)
{
	if ((p = soap_in_policynet__BinaryData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct policynet__BinaryData * SOAP_FMAC4 soap_in_policynet__BinaryData(struct soap *soap, const char *tag, struct policynet__BinaryData *a, const char *type)
{
	short soap_flag_xop__Include = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct policynet__BinaryData *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_policynet__BinaryData, sizeof(struct policynet__BinaryData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_policynet__BinaryData(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "xmime5:contentType", 0), &a->xmime5__contentType))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xop__Include && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__xop__Include(soap, "xop:Include", &a->xop__Include, ""))
				{	soap_flag_xop__Include--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct policynet__BinaryData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_policynet__BinaryData, 0, sizeof(struct policynet__BinaryData), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xop__Include > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct policynet__BinaryData * SOAP_FMAC6 soap_new_policynet__BinaryData(struct soap *soap, int n)
{	return soap_instantiate_policynet__BinaryData(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_policynet__BinaryData(struct soap *soap, struct policynet__BinaryData *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct policynet__BinaryData * SOAP_FMAC4 soap_instantiate_policynet__BinaryData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_policynet__BinaryData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_policynet__BinaryData, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct policynet__BinaryData;
		if (size)
			*size = sizeof(struct policynet__BinaryData);
	}
	else
	{	cp->ptr = (void*)new struct policynet__BinaryData[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct policynet__BinaryData);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct policynet__BinaryData*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_policynet__BinaryData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct policynet__BinaryData %p -> %p\n", q, p));
	*(struct policynet__BinaryData*)p = *(struct policynet__BinaryData*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->policynet__LoginUsername);
	soap_default_string(soap, &a->policynet__SessionId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->policynet__LoginUsername);
	soap_serialize_string(soap, &a->policynet__SessionId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_SOAP_ENV__Header), type);
	soap_out_string(soap, "policynet:LoginUsername", -1, &a->policynet__LoginUsername, "");
	soap_out_string(soap, "policynet:SessionId", -1, &a->policynet__SessionId, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	short soap_flag_policynet__LoginUsername = 1, soap_flag_policynet__SessionId = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_policynet__LoginUsername && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "policynet:LoginUsername", &a->policynet__LoginUsername, "xsd:string"))
				{	soap_flag_policynet__LoginUsername--;
					continue;
				}
			if (soap_flag_policynet__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "policynet:SessionId", &a->policynet__SessionId, "xsd:string"))
				{	soap_flag_policynet__SessionId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default__xop__Include(struct soap *soap, struct _xop__Include *a)
{
	a->__size = 0;
	a->__ptr = NULL;
	a->id = NULL;
	a->type = NULL;
	a->options = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xop__Include(struct soap *soap, struct _xop__Include const*a)
{
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_policynetca__xop__Include))
		if (a->id || a->type)
			soap->mode |= SOAP_ENC_DIME;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xop__Include(struct soap *soap, const struct _xop__Include *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_policynetca__xop__Include);
	if (soap_out__xop__Include(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__xop__Include(struct soap *soap, const char *tag, int id, const struct _xop__Include *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_policynetca__xop__Include);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_policynetca__xop__Include);
#endif
	if (id < 0)
		return soap->error;
	soap_element_begin_out(soap, tag, id, type);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_get__xop__Include(struct soap *soap, struct _xop__Include *p, const char *tag, const char *type)
{
	if ((p = soap_in__xop__Include(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_in__xop__Include(struct soap *soap, const char *tag, struct _xop__Include *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct _xop__Include *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca__xop__Include, sizeof(struct _xop__Include), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__xop__Include(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (struct _xop__Include *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_policynetca__xop__Include, 0, sizeof(struct _xop__Include), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct _xop__Include * SOAP_FMAC6 soap_new__xop__Include(struct soap *soap, int n)
{	return soap_instantiate__xop__Include(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__xop__Include(struct soap *soap, struct _xop__Include *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct _xop__Include * SOAP_FMAC4 soap_instantiate__xop__Include(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__xop__Include(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca__xop__Include, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct _xop__Include;
		if (size)
			*size = sizeof(struct _xop__Include);
	}
	else
	{	cp->ptr = (void*)new struct _xop__Include[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct _xop__Include);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct _xop__Include*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__xop__Include(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct _xop__Include %p -> %p\n", q, p));
	*(struct _xop__Include*)p = *(struct _xop__Include*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_policynet__EETypeUnion(struct soap *soap, int choice, const union policynet__EETypeUnion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION_policynet__EETypeUnion_Device:
		soap_serialize_PointerTopolicynet__SGDevice(soap, &a->Device);
		break;
	case SOAP_UNION_policynet__EETypeUnion_Service:
		break;
	default:
		break;
	}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_policynet__EETypeUnion(struct soap *soap, int choice, const union policynet__EETypeUnion *a)
{
	switch (choice)
	{
	case SOAP_UNION_policynet__EETypeUnion_Device:
		return soap_out_PointerTopolicynet__SGDevice(soap, "policynet:Device", -1, &a->Device, "");
	case SOAP_UNION_policynet__EETypeUnion_Service:
		return soap_out_policynet__PNService(soap, "policynet:Service", -1, &a->Service, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union policynet__EETypeUnion * SOAP_FMAC4 soap_in_policynet__EETypeUnion(struct soap *soap, int *choice, union policynet__EETypeUnion *a)
{	soap->error = SOAP_TAG_MISMATCH;
	a->Device = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTopolicynet__SGDevice(soap, "policynet:Device", &a->Device, "policynet:SGDevice"))
	{	*choice = SOAP_UNION_policynet__EETypeUnion_Device;
		return a;
	}
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_policynet__PNService(soap, "policynet:Service", &a->Service, "policynet:PNService"))
	{	*choice = SOAP_UNION_policynet__EETypeUnion_Service;
		return a;
	}
	*choice = 0;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_policynetca_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_policynetca_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_policynetca_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTopolicynet__PKCSDigitalEvenlope(struct soap *soap, policynet__PKCSDigitalEvenlope *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTopolicynet__PKCSDigitalEvenlope(struct soap *soap, policynet__PKCSDigitalEvenlope *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerTopolicynet__PKCSDigitalEvenlope);
	if (soap_out_PointerTopolicynet__PKCSDigitalEvenlope(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTopolicynet__PKCSDigitalEvenlope(struct soap *soap, const char *tag, int id, policynet__PKCSDigitalEvenlope *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 policynet__PKCSDigitalEvenlope ** SOAP_FMAC4 soap_get_PointerTopolicynet__PKCSDigitalEvenlope(struct soap *soap, policynet__PKCSDigitalEvenlope **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTopolicynet__PKCSDigitalEvenlope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 policynet__PKCSDigitalEvenlope ** SOAP_FMAC4 soap_in_PointerTopolicynet__PKCSDigitalEvenlope(struct soap *soap, const char *tag, policynet__PKCSDigitalEvenlope **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (policynet__PKCSDigitalEvenlope **)soap_malloc(soap, sizeof(policynet__PKCSDigitalEvenlope *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (policynet__PKCSDigitalEvenlope *)soap_instantiate_policynet__PKCSDigitalEvenlope(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	policynet__PKCSDigitalEvenlope ** p = (policynet__PKCSDigitalEvenlope **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_policynet__PKCSDigitalEvenlope, sizeof(policynet__PKCSDigitalEvenlope), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__dateTime(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_policynetca_xsd__dateTime))
		soap_serialize_xsd__dateTime(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__dateTime(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerToxsd__dateTime);
	if (soap_out_PointerToxsd__dateTime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__dateTime(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_xsd__dateTime);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__dateTime(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__dateTime(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_xsd__dateTime, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTopolicynet__SGDevice(struct soap *soap, policynet__SGDevice *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_policynetca_policynet__SGDevice))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTopolicynet__SGDevice(struct soap *soap, policynet__SGDevice *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerTopolicynet__SGDevice);
	if (soap_out_PointerTopolicynet__SGDevice(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTopolicynet__SGDevice(struct soap *soap, const char *tag, int id, policynet__SGDevice *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_policynet__SGDevice);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 policynet__SGDevice ** SOAP_FMAC4 soap_get_PointerTopolicynet__SGDevice(struct soap *soap, policynet__SGDevice **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTopolicynet__SGDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 policynet__SGDevice ** SOAP_FMAC4 soap_in_PointerTopolicynet__SGDevice(struct soap *soap, const char *tag, policynet__SGDevice **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (policynet__SGDevice **)soap_malloc(soap, sizeof(policynet__SGDevice *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (policynet__SGDevice *)soap_instantiate_policynet__SGDevice(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	policynet__SGDevice ** p = (policynet__SGDevice **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_policynet__SGDevice, sizeof(policynet__SGDevice), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTopolicynet__PKIFailureInfo(struct soap *soap, enum policynet__PKIFailureInfo *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_policynetca_policynet__PKIFailureInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTopolicynet__PKIFailureInfo(struct soap *soap, enum policynet__PKIFailureInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerTopolicynet__PKIFailureInfo);
	if (soap_out_PointerTopolicynet__PKIFailureInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTopolicynet__PKIFailureInfo(struct soap *soap, const char *tag, int id, enum policynet__PKIFailureInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_policynet__PKIFailureInfo);
	if (id < 0)
		return soap->error;
	return soap_out_policynet__PKIFailureInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 enum policynet__PKIFailureInfo ** SOAP_FMAC4 soap_get_PointerTopolicynet__PKIFailureInfo(struct soap *soap, enum policynet__PKIFailureInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTopolicynet__PKIFailureInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 enum policynet__PKIFailureInfo ** SOAP_FMAC4 soap_in_PointerTopolicynet__PKIFailureInfo(struct soap *soap, const char *tag, enum policynet__PKIFailureInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (enum policynet__PKIFailureInfo **)soap_malloc(soap, sizeof(enum policynet__PKIFailureInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_policynet__PKIFailureInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (enum policynet__PKIFailureInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_policynet__PKIFailureInfo, sizeof(enum policynet__PKIFailureInfo), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_policynetca_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_policynetca_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_policynetca_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_policynetca__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	char** str = soap_instring(soap, tag, a, type, SOAP_TYPE_policynetca__QName, 2, -1, -1);
	return str;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_policynetca_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_policynetca_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	char** str = soap_instring(soap, tag, a, type, SOAP_TYPE_policynetca_string, 1, -1, -1);
	return str;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Array16OfunsignedByte(struct soap *soap, unsigned char a[16])
{
	int i;
	(void)soap; /* appease -Wall -Werror */
	for (i = 0; i < 16; i++)
	soap_default_unsignedByte(soap, a+i);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_Array16OfunsignedByte(struct soap *soap, unsigned char const a[16])
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Array16OfunsignedByte(struct soap *soap, unsigned char const a[16], const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_policynetca_Array16OfunsignedByte);
	if (soap_out_Array16OfunsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Array16OfunsignedByte(struct soap *soap, const char *tag, int id, unsigned char const a[16], const char *type)
{
	int i;
	soap_array_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_policynetca_Array16OfunsignedByte), "xsd:unsignedByte[16]", 0);
	for (i = 0; i < 16; i++)
	{
		soap_out_unsignedByte(soap, "item", -1, a+i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_Array16OfunsignedByte(struct soap *soap, unsigned char a[16], const char *tag, const char *type)
{	unsigned char (*p);
	if ((p = soap_in_Array16OfunsignedByte(soap, tag, a, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_Array16OfunsignedByte(struct soap *soap, const char *tag, unsigned char a[16], const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (unsigned char (*))soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_Array16OfunsignedByte, sizeof(unsigned char[16]), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_Array16OfunsignedByte(soap, a);
	if (soap->body && !*soap->href)
	{	int i;
		for (i = 0; i < 16; i++)
		{	soap_peek_element(soap);
			if (soap->position)
			{	i = soap->positions[0];
				if (i < 0 || i >= 16)
				{	soap->error = SOAP_IOB;
					return NULL;
				}
			}
			if (!soap_in_unsignedByte(soap, NULL, a+i, "xsd:unsignedByte"))
			{	if (soap->error != SOAP_NO_TAG)
					return NULL;
				soap->error = SOAP_OK;
				break;
			}
		}
		if (soap->mode & SOAP_C_NOIOB)
			while (soap_element_end_in(soap, tag) == SOAP_SYNTAX_ERROR)
			{	soap->peeked = 1;
				soap_ignore_element(soap);
			}
		else if (soap_element_end_in(soap, tag))
		{	if (soap->error == SOAP_SYNTAX_ERROR)
				soap->error = SOAP_IOB;
			return NULL;
		}
	}
	else
	{	a = (unsigned char (*))soap_id_forward(soap, soap->href, (void*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_policynetca_Array16OfunsignedByte, sizeof(unsigned char[16]), 0, NULL, NULL, NULL), 0, SOAP_TYPE_policynetca_Array16OfunsignedByte, 0, sizeof(unsigned char[16]), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return (unsigned char *)a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_policynet__PKCS10(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_policynet__PKCS10(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfpolicynet__PKCS10(soap, -1)))
		return NULL;
	std::string n;
	std::string *p;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_policynetca_policynet__PKCS10, SOAP_TYPE_policynetca_std__vectorTemplateOfpolicynet__PKCS10, sizeof(std::string), 0))
				break;
			if (!(p = soap_in_policynet__PKCS10(soap, tag, NULL, "policynet:PKCS10")))
				break;
		}
		else
		{	soap_default_policynet__PKCS10(soap, &n);
			if (!soap_in_policynet__PKCS10(soap, tag, &n, "policynet:PKCS10"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<std::string > * SOAP_FMAC6 soap_new_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfpolicynet__PKCS10(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, std::vector<std::string >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<std::string > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfpolicynet__PKCS10(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_policynetca_std__vectorTemplateOfpolicynet__PKCS10, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<std::string >;
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)new std::vector<std::string >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfpolicynet__PKCS10(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

} // namespace policynetca


/* End of policynetcaC.cpp */
