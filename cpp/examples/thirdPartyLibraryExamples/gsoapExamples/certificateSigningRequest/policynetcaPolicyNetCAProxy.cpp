/* policynetcaPolicyNetCAProxy.cpp
   Generated by gSOAP 2.7.9i from csr.hpp
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "policynetcaPolicyNetCAProxy.h"

namespace policynetca {

PolicyNetCAProxy::PolicyNetCAProxy()
{	PolicyNetCAProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

PolicyNetCAProxy::PolicyNetCAProxy(soap_mode iomode)
{	PolicyNetCAProxy_init(iomode, iomode);
}

PolicyNetCAProxy::PolicyNetCAProxy(soap_mode imode, soap_mode omode)
{	PolicyNetCAProxy_init(imode, omode);
}

void PolicyNetCAProxy::PolicyNetCAProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/2003/05/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
	{"xmime5", "http://www.w3.org/2005/05/xmlmime", NULL, NULL},
	{"policynet", "urn:policynet/0.0.0", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

PolicyNetCAProxy::~PolicyNetCAProxy()
{ }

void PolicyNetCAProxy::soap_noheader()
{	header = NULL;
}

void PolicyNetCAProxy::soap_header(char *policynet__LoginUsername, char *policynet__SessionId)
{	if (!header)
		header = soap_new_SOAP_ENV__Header(this, -1);
	header->policynet__LoginUsername = policynet__LoginUsername;
	header->policynet__SessionId = policynet__SessionId;
}

const SOAP_ENV__Header *PolicyNetCAProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *PolicyNetCAProxy::soap_fault()
{	return this->fault;
}

const char *PolicyNetCAProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *PolicyNetCAProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int PolicyNetCAProxy::CertificateSigningRequest(policynet__CertificateSigning Request, policynet__CertificateSigningResponse &Response)
{	struct soap *soap = this;
	struct policynet__CertificateSigningRequest soap_tmp_policynet__CertificateSigningRequest;
	const char *soap_action = NULL;
	soap_action = "CertificateSigning";
	soap->encodingStyle = NULL;
	soap_tmp_policynet__CertificateSigningRequest.Request = Request;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_policynet__CertificateSigningRequest(soap, &soap_tmp_policynet__CertificateSigningRequest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_policynet__CertificateSigningRequest(soap, &soap_tmp_policynet__CertificateSigningRequest, "policynet:CertificateSigningRequest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_policynet__CertificateSigningRequest(soap, &soap_tmp_policynet__CertificateSigningRequest, "policynet:CertificateSigningRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&Response)
		return soap_closesock(soap);
	Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Response.soap_get(soap, "policynet:CertificateSigningResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PolicyNetCAProxy::CertificateConfirmRequest(policynet__CertificateConfirm Confirm, policynet__CertificateConfirmResponse &Response)
{	struct soap *soap = this;
	struct policynet__CertificateConfirmRequest soap_tmp_policynet__CertificateConfirmRequest;
	const char *soap_action = NULL;
	soap_action = "CertificateConfirm";
	soap->encodingStyle = NULL;
	soap_tmp_policynet__CertificateConfirmRequest.Confirm = Confirm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_policynet__CertificateConfirmRequest(soap, &soap_tmp_policynet__CertificateConfirmRequest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_policynet__CertificateConfirmRequest(soap, &soap_tmp_policynet__CertificateConfirmRequest, "policynet:CertificateConfirmRequest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_policynet__CertificateConfirmRequest(soap, &soap_tmp_policynet__CertificateConfirmRequest, "policynet:CertificateConfirmRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&Response)
		return soap_closesock(soap);
	Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Response.soap_get(soap, "policynet:CertificateConfirmResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PolicyNetCAProxy::CertificateRevocationRequest(std::string SenderCertificate, policynet__CertificateRevocation CertRev, policynet__CertificateRevocationResponse &Response)
{	struct soap *soap = this;
	struct policynet__CertificateRevocationRequest soap_tmp_policynet__CertificateRevocationRequest;
	const char *soap_action = NULL;
	soap_action = "CertificateRevocation";
	soap->encodingStyle = NULL;
	soap_tmp_policynet__CertificateRevocationRequest.SenderCertificate = SenderCertificate;
	soap_tmp_policynet__CertificateRevocationRequest.CertRev = CertRev;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_policynet__CertificateRevocationRequest(soap, &soap_tmp_policynet__CertificateRevocationRequest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_policynet__CertificateRevocationRequest(soap, &soap_tmp_policynet__CertificateRevocationRequest, "policynet:CertificateRevocationRequest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_policynet__CertificateRevocationRequest(soap, &soap_tmp_policynet__CertificateRevocationRequest, "policynet:CertificateRevocationRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&Response)
		return soap_closesock(soap);
	Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Response.soap_get(soap, "policynet:CertificateRevocationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int PolicyNetCAProxy::CertificateRevocationListRequest(void *_param_1, policynet__CertificateRevocationListResponse &Response)
{	struct soap *soap = this;
	struct policynet__CertificateRevocationListRequest soap_tmp_policynet__CertificateRevocationListRequest;
	const char *soap_action = NULL;
	soap_action = "CertificateRevocationList";
	soap->encodingStyle = NULL;
	soap_tmp_policynet__CertificateRevocationListRequest._param_1 = _param_1;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_policynet__CertificateRevocationListRequest(soap, &soap_tmp_policynet__CertificateRevocationListRequest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_policynet__CertificateRevocationListRequest(soap, &soap_tmp_policynet__CertificateRevocationListRequest, "policynet:CertificateRevocationListRequest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_policynet__CertificateRevocationListRequest(soap, &soap_tmp_policynet__CertificateRevocationListRequest, "policynet:CertificateRevocationListRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&Response)
		return soap_closesock(soap);
	Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Response.soap_get(soap, "policynet:CertificateRevocationListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace policynetca

/* End of client proxy code */
