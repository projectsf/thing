

/**
 * Unfinished code
 */

class AbstractEvent;
class EventHandler
{
	typedef boost::function<void()> TpFunc;
	public:
		EventHandler(const TpFunc& callback)
	: eventHandler(callback)
		
		virtual void operator()()
		{
			eventHandler(event);
		};
		virtual ~EventHandler() {};
		
	private:
		const TpFunc& eventHandler;
};

class EventManager
{
	public:
		static EventManager* instance;
		static EventManager * getInstance()
		{
			if(!instance)
				instance = new EventManager;
			return instance;
		}
		void subscribe(ConcreteEventHandler* handler)
		{
			std::cout << "Somebody subscribed" << std::endl;
			eventHandlers.push_back(handler);
		}
		void run()
		{
			std::for_each(eventHandlers.begin(), eventHandler,end(), boost::mem_fn(
			{
				(*iter)->();
			}
		}
	private:
		static EventManager* instance;
		set<ConcreteEventHandler*> eventHandlers;
}


class ConcretEventHandler;
{
	public:
		
		ConcreteEventHandler()
		{
			EventManager::getInstance->register(this);
		}
	: eventHandler(&myHandler)

		void myHandler()
		{
			std::cout << "Handling Event" << std::endl;
		}
	
	private:
		EventHandler eventHandler;
};

int main()
{
	EventManager::instance = 0;
	ConcreteEventHandler concreteEventHandler;
	EventManager.run();
}
	