#! /usr/local/bin/perl


# a file must be created that contains a list of all the vhdl files
# listed in order with the lowest levels of hierarchy on the top
# filename should be called DesignList.txt


# structure format will be
  # -------------------------------------------------------------------------
  # | index | $filename | combo(0)/seq(1) | Inst(yes(1)/no(0)) | INST list
  # --------------------------------------------------------------------------

# capitalization with component instantiations??
  # read in component and then search list for similar *.vhd file?

# might address format issues vhdl vs. verilog


# need contraints for global clocks
# might need names for clks/resets
# the globals go into the global.con file
# along with clock skew, wire load, and input delay


#### main build data structure routine

&BuildDataStructure;
&WriteFiles;


sub BuildDataStructure{

  open INFILE, "DesignList.txt" or die "Can't find DesignList.txt file\n";

  $ctr=0;

  while (<INFILE>){
    # check for format here (vhdl/verilog)
    # might just add later (priority is low)
    # ignore comments and empty lines
    # eliminate chops eventually (should just keep everything until period)
    chop;
    chop;
    chop;
    chop;
    chop;

    # add filename to @filestruct 
    $filestruct[$ctr][0] = $_;

    open HDLFILE, "../hdl/$filestruct[$ctr][0].vhd"  
      or die "Can't find $filestruct[$ctr][0].vhd\n";

    # reset Seq and Combo values for every block
    $Seq = 0;
    $Level = 0;
    @Component= (); #init component list to null

    while (<HDLFILE>){
      # if synchronous than set bit
      if (/\'event/i) {
        $Seq = 1;
      }

      # if components are instantiated than set bit
      if (/component/ &! /;/ &! /-/) {
        $Seq = 1;
        $Level = 1;
        s/\w+\s*(\w+)\s*/$1/;
        $Inst = "\L$_";  # make all lowercase
        push @Component, $Inst;
      }


    }

    # add control bits and  component array to data structure
    push @{ $filestruct[$ctr] }, $Seq,$Level;
    $filestruct[$ctr][3] =  [ @Component ] ;

    close(HDLFILE);

    $ctr++;


  }
  close(INFILE);

} # end BuildDataStructure


sub WriteFiles{

  for $term ( @filestruct){
    &WriteConFiles;
    #&WriteScrFiles;
    #&WriteScrExFiles;
  }
    #&WriteSynthAllScr;
}

sub WriteConFiles{

  # write out skeleton <filename.con> file
  open CONFILE,    ">./scripts/$term->[0].con"
      or die "Can't open ./scripts/$term->[0].con";

  # write out comment only <filename>.con
  print CONFILE "/* This is a general constraint file for $term->[0] */ \n";
  print CONFILE "/* This script was generated by GenSynScr.pl */ \n";
  print CONFILE "/* Additional block specific constraints  */ \n";
  print CONFILE "/* should be inserted into this file   */ \n";
  print CONFILE "\n";
  
  close CONFILE;
}

sub WriteScrFiles{

  # write out skeleton <filename.scr>
  open SCRFILE,    ">./scripts/$term->[0].scr"
    or die "Can't open ./scripts/$term->[0].scr";

  print SCRFILE "/* This is a general script file for $term->[0] */ \n";
  print SCRFILE "/* This script was generated by GenSynScr.pl */ \n";

  # if components exist than read in lower level dbs
  if($term->[2] == 1){
    print SCRFILE "\n";
    print SCRFILE "/* Read in lower level compiled db files */ \n";
    foreach $NewTerm (@{$term->[3]}){
      print SCRFILE "read -f db ./db/$NewTerm.db\n";
    }
  }

  print SCRFILE "\n";
  print SCRFILE "/* Read in top level $term->[0].vhd */ \n";
  print SCRFILE "analyze -f vhdl -lib WORK ../hdl/$term->[0].vhd\n";
  print SCRFILE "elaborate -lib WORK $term->[0] \n";

  
  # if sequential than read in global #
    if($term->[1] == 1){
      print SCRFILE "\n";
      print SCRFILE "/* Read in global constraints file global.con */ \n";
      print SCRFILE "/* global.con contains wire load and other defaults */ \n";
      print SCRFILE "include ./scripts/global.con\n";
      print SCRFILE "\n";
    }

  print SCRFILE "\n";
  print SCRFILE "/* Read in $term->[0] constraints file */ \n";
  print SCRFILE "include ./scripts/$term->[0].con\n";

  if($term->[2] == 1){
    foreach $NewTerm (@{$term->[3]}){
      $UpCase = "\U$NewTerm";
      print SCRFILE "set_dont_touch $UpCase\n";
    }
  }

  print SCRFILE "\n";
  print SCRFILE "/* compile */ \n";
  print SCRFILE "compile -map_effort medium\n";

  # find DW parts and ungroup
  #print SCRFILE "\n";
  #print SCRFILE "/* This is used to remove unneeded logic  */ \n";
  #print SCRFILE "/* that synopsys insertes while using DW */ \n";
  #print SCRFILE "set_ungroup -find (design, \"\*DW\") \n";
  #print SCRFILE "compile -boundary_optimization\n";

  # write out rpt files
  print SCRFILE "\n";
  print SCRFILE "/* Write out report files DW */ \n";
  print SCRFILE "check_design  \> ./log/$term->[0]\_check.rpt\n";
  print SCRFILE "report_area   \> ./log/$term->[0]\_area.rpt\n";
  print SCRFILE "report_timing \> ./log/$term->[0]\_timing.rpt\n";

  # write out db file
  print SCRFILE "\n";
  print SCRFILE "/* Write out db file */ \n";
  print SCRFILE "write -format db -hier -output ./db/$term->[0].db\n";
  print SCRFILE "\n";

  #quit
  print SCRFILE "quit\n";

  close(SCRFILE);
} # end WriteScrFiles;


sub WriteScrExFiles{
  #open script executable files in syn directory
  open SCREXFILE,    ">syn-$term->[0]"
    or die "Can't open run-$term->[0]";
  chmod 0700, "syn-$term->[0]" or die "can't change permissions";
  print SCREXFILE " # this was generated by SynScriptGen.pl \n";
  print SCREXFILE "\n";
  print SCREXFILE "dc_shell -f ./scripts/$term->[0].scr > ./log/$term->[0].log\n";
  close (SCREXFILE);
} #end WriteScrExFiles;

sub WriteSynthAllScr{
  #open script executable files in syn directory
  open SYNALLFILE,    ">syn-Tesla"
    or die "Can't open syn-Tesla";

  print SYNALLFILE "#\n";
  print SYNALLFILE "# Shell script to synthesize whole design  \n";
  print SYNALLFILE "# This script was generated by GenSynScr.pl  \n";
  print SYNALLFILE "#\n";
  print SYNALLFILE "\n";

  for $term ( @filestruct){
    print SYNALLFILE "syn-$term->[0]\n";
  }

  close (SYNALLFILE);
  chmod 0700, "syn-Tesla" or die "can't change permissions";

} #end WriteSynthAllScr;

